{"ast":null,"code":"import find from '../polyfills/find';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport printPathArray from '../jsutils/printPathArray';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { Kind } from '../language/kinds';\nimport { print } from '../language/printer';\nimport { isInputType, isNonNullType } from '../type/definition';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { valueFromAST } from '../utilities/valueFromAST';\nimport { coerceInputValue } from '../utilities/coerceInputValue';\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  var maxErrors = options && options.maxErrors;\n  var errors = [];\n\n  try {\n    var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced: coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors: errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  var coercedValues = {};\n\n  var _loop = function _loop(_i2) {\n    var varDefNode = varDefNodes[_i2];\n    var varName = varDefNode.variable.name.value;\n    var varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      var varTypeStr = print(varDefNode.type);\n      onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" expected value of type \\\"\").concat(varTypeStr, \"\\\" which cannot be used as an input type.\"), varDefNode.type));\n      return \"continue\";\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        var _varTypeStr = inspect(varType);\n\n        onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of required type \\\"\").concat(_varTypeStr, \"\\\" was not provided.\"), varDefNode));\n      }\n\n      return \"continue\";\n    }\n\n    var value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      var _varTypeStr2 = inspect(varType);\n\n      onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of non-null type \\\"\").concat(_varTypeStr2, \"\\\" must not be null.\"), varDefNode));\n      return \"continue\";\n    }\n\n    coercedValues[varName] = coerceInputValue(value, varType, function (path, invalidValue, error) {\n      var prefix = \"Variable \\\"$\".concat(varName, \"\\\" got invalid value \") + inspect(invalidValue);\n\n      if (path.length > 0) {\n        prefix += \" at \\\"\".concat(varName).concat(printPathArray(path), \"\\\"\");\n      }\n\n      onError(new GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));\n    });\n  };\n\n  for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {\n    var _ret = _loop(_i2);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\n\nexport function getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argNodeMap = keyMap(node.arguments || [], function (arg) {\n    return arg.name.value;\n  });\n\n  for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {\n    var argDef = _def$args2[_i4];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + 'was not provided.', node);\n      }\n\n      continue;\n    }\n\n    var valueNode = argumentNode.value;\n    var isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      var variableName = valueNode.name.value;\n\n      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + \"was provided the variable \\\"$\".concat(variableName, \"\\\" which was not provided a runtime value.\"), valueNode);\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of non-null type \\\"\").concat(inspect(argType), \"\\\" \") + 'must not be null.', valueNode);\n    }\n\n    var coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectType validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" has invalid value \").concat(print(valueNode), \".\"), valueNode);\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && find(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","map":{"version":3,"names":["find","keyMap","inspect","printPathArray","GraphQLError","Kind","print","isInputType","isNonNullType","typeFromAST","valueFromAST","coerceInputValue","getVariableValues","schema","varDefNodes","inputs","options","maxErrors","errors","coerced","coerceVariableValues","error","length","push","onError","coercedValues","_loop","_i2","varDefNode","varName","variable","name","value","varType","type","varTypeStr","concat","hasOwnProperty","defaultValue","_varTypeStr","_varTypeStr2","path","invalidValue","prefix","message","undefined","originalError","_ret","getArgumentValues","def","node","variableValues","argNodeMap","arguments","arg","_i4","_def$args2","args","argDef","argType","argumentNode","valueNode","isNull","kind","NULL","VARIABLE","variableName","coercedValue","getDirectiveValues","directiveDef","directiveNode","directives","directive","obj","prop","Object","prototype","call"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/execution/values.mjs"],"sourcesContent":["import find from '../polyfills/find';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport printPathArray from '../jsutils/printPathArray';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { Kind } from '../language/kinds';\nimport { print } from '../language/printer';\nimport { isInputType, isNonNullType } from '../type/definition';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { valueFromAST } from '../utilities/valueFromAST';\nimport { coerceInputValue } from '../utilities/coerceInputValue';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  var maxErrors = options && options.maxErrors;\n  var errors = [];\n\n  try {\n    var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced: coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors: errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  var coercedValues = {};\n\n  var _loop = function _loop(_i2) {\n    var varDefNode = varDefNodes[_i2];\n    var varName = varDefNode.variable.name.value;\n    var varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      var varTypeStr = print(varDefNode.type);\n      onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" expected value of type \\\"\").concat(varTypeStr, \"\\\" which cannot be used as an input type.\"), varDefNode.type));\n      return \"continue\";\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        var _varTypeStr = inspect(varType);\n\n        onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of required type \\\"\").concat(_varTypeStr, \"\\\" was not provided.\"), varDefNode));\n      }\n\n      return \"continue\";\n    }\n\n    var value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      var _varTypeStr2 = inspect(varType);\n\n      onError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of non-null type \\\"\").concat(_varTypeStr2, \"\\\" must not be null.\"), varDefNode));\n      return \"continue\";\n    }\n\n    coercedValues[varName] = coerceInputValue(value, varType, function (path, invalidValue, error) {\n      var prefix = \"Variable \\\"$\".concat(varName, \"\\\" got invalid value \") + inspect(invalidValue);\n\n      if (path.length > 0) {\n        prefix += \" at \\\"\".concat(varName).concat(printPathArray(path), \"\\\"\");\n      }\n\n      onError(new GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));\n    });\n  };\n\n  for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {\n    var _ret = _loop(_i2);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\n\nexport function getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argNodeMap = keyMap(node.arguments || [], function (arg) {\n    return arg.name.value;\n  });\n\n  for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {\n    var argDef = _def$args2[_i4];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + 'was not provided.', node);\n      }\n\n      continue;\n    }\n\n    var valueNode = argumentNode.value;\n    var isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      var variableName = valueNode.name.value;\n\n      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + \"was provided the variable \\\"$\".concat(variableName, \"\\\" which was not provided a runtime value.\"), valueNode);\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of non-null type \\\"\").concat(inspect(argType), \"\\\" \") + 'must not be null.', valueNode);\n    }\n\n    var coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectType validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" has invalid value \").concat(print(valueNode), \".\"), valueNode);\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && find(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}