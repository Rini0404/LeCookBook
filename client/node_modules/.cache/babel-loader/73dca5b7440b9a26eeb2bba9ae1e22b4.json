{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nexport function anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n\nexport function LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError(anonOperationNotAloneMessage(), node));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","anonOperationNotAloneMessage","LoneAnonymousOperation","context","operationCount","Document","node","definitions","filter","definition","kind","OPERATION_DEFINITION","length","OperationDefinition","name","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/LoneAnonymousOperation.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nexport function anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n\nexport function LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError(anonOperationNotAloneMessage(), node));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,OAAO,SAASC,4BAAT,GAAwC;EAC7C,OAAO,8DAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;EAC9C,IAAIC,cAAc,GAAG,CAArB;EACA,OAAO;IACLC,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;MAChCF,cAAc,GAAGE,IAAI,CAACC,WAAL,CAAiBC,MAAjB,CAAwB,UAAUC,UAAV,EAAsB;QAC7D,OAAOA,UAAU,CAACC,IAAX,KAAoBV,IAAI,CAACW,oBAAhC;MACD,CAFgB,EAEdC,MAFH;IAGD,CALI;IAMLC,mBAAmB,EAAE,SAASA,mBAAT,CAA6BP,IAA7B,EAAmC;MACtD,IAAI,CAACA,IAAI,CAACQ,IAAN,IAAcV,cAAc,GAAG,CAAnC,EAAsC;QACpCD,OAAO,CAACY,WAAR,CAAoB,IAAIhB,YAAJ,CAAiBE,4BAA4B,EAA7C,EAAiDK,IAAjD,CAApB;MACD;IACF;EAVI,CAAP;AAYD"},"metadata":{},"sourceType":"module"}