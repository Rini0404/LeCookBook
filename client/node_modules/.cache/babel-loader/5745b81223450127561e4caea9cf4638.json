{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function schemaDefinitionNotAloneMessage() {\n  return 'Must provide only one schema definition.';\n}\nexport function canNotDefineSchemaWithinExtensionMessage() {\n  return 'Cannot define a new schema within a schema extension.';\n}\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\n\nexport function LoneSchemaDefinition(context) {\n  var oldSchema = context.getSchema();\n  var alreadyDefined = oldSchema && (oldSchema.astNode || oldSchema.getQueryType() || oldSchema.getMutationType() || oldSchema.getSubscriptionType());\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError(canNotDefineSchemaWithinExtensionMessage(), node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError(schemaDefinitionNotAloneMessage(), node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","schemaDefinitionNotAloneMessage","canNotDefineSchemaWithinExtensionMessage","LoneSchemaDefinition","context","oldSchema","getSchema","alreadyDefined","astNode","getQueryType","getMutationType","getSubscriptionType","schemaDefinitionsCount","SchemaDefinition","node","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/LoneSchemaDefinition.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function schemaDefinitionNotAloneMessage() {\n  return 'Must provide only one schema definition.';\n}\nexport function canNotDefineSchemaWithinExtensionMessage() {\n  return 'Cannot define a new schema within a schema extension.';\n}\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\n\nexport function LoneSchemaDefinition(context) {\n  var oldSchema = context.getSchema();\n  var alreadyDefined = oldSchema && (oldSchema.astNode || oldSchema.getQueryType() || oldSchema.getMutationType() || oldSchema.getSubscriptionType());\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError(canNotDefineSchemaWithinExtensionMessage(), node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError(schemaDefinitionNotAloneMessage(), node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,+BAAT,GAA2C;EAChD,OAAO,0CAAP;AACD;AACD,OAAO,SAASC,wCAAT,GAAoD;EACzD,OAAO,uDAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;EAC5C,IAAIC,SAAS,GAAGD,OAAO,CAACE,SAAR,EAAhB;EACA,IAAIC,cAAc,GAAGF,SAAS,KAAKA,SAAS,CAACG,OAAV,IAAqBH,SAAS,CAACI,YAAV,EAArB,IAAiDJ,SAAS,CAACK,eAAV,EAAjD,IAAgFL,SAAS,CAACM,mBAAV,EAArF,CAA9B;EACA,IAAIC,sBAAsB,GAAG,CAA7B;EACA,OAAO;IACLC,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;MAChD,IAAIP,cAAJ,EAAoB;QAClBH,OAAO,CAACW,WAAR,CAAoB,IAAIf,YAAJ,CAAiBE,wCAAwC,EAAzD,EAA6DY,IAA7D,CAApB;QACA;MACD;;MAED,IAAIF,sBAAsB,GAAG,CAA7B,EAAgC;QAC9BR,OAAO,CAACW,WAAR,CAAoB,IAAIf,YAAJ,CAAiBC,+BAA+B,EAAhD,EAAoDa,IAApD,CAApB;MACD;;MAED,EAAEF,sBAAF;IACD;EAZI,CAAP;AAcD"},"metadata":{},"sourceType":"module"}