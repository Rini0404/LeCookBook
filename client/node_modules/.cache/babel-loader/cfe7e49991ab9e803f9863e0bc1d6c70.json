{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return \"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), node.type));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isInputType","typeFromAST","nonInputTypeOnVarMessage","variableName","typeName","concat","VariablesAreInputTypes","context","VariableDefinition","node","type","getSchema","variable","name","value","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/VariablesAreInputTypes.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return \"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), node.type));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAO,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,QAAhD,EAA0D;EAC/D,OAAO,eAAeC,MAAf,CAAsBF,YAAtB,EAAoC,gCAApC,EAAsEE,MAAtE,CAA6ED,QAA7E,EAAuF,KAAvF,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,sBAAT,CAAgCC,OAAhC,EAAyC;EAC9C,OAAO;IACLC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;MACpD,IAAIC,IAAI,GAAGT,WAAW,CAACM,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,IAA3B,CAAtB,CADoD,CACI;;MAExD,IAAIA,IAAI,IAAI,CAACV,WAAW,CAACU,IAAD,CAAxB,EAAgC;QAC9B,IAAIP,YAAY,GAAGM,IAAI,CAACG,QAAL,CAAcC,IAAd,CAAmBC,KAAtC;QACAP,OAAO,CAACQ,WAAR,CAAoB,IAAIjB,YAAJ,CAAiBI,wBAAwB,CAACC,YAAD,EAAeJ,KAAK,CAACU,IAAI,CAACC,IAAN,CAApB,CAAzC,EAA2ED,IAAI,CAACC,IAAhF,CAApB;MACD;IACF;EARI,CAAP;AAUD"},"metadata":{},"sourceType":"module"}