{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateArgMessage(argName) {\n  return \"There can be only one argument named \\\"\".concat(argName, \"\\\".\");\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateArgMessage","argName","concat","UniqueArgumentNames","context","knownArgNames","Object","create","Field","Directive","Argument","node","name","value","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueArgumentNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateArgMessage(argName) {\n  return \"There can be only one argument named \\\"\".concat(argName, \"\\\".\");\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,OAAO,0CAA0CC,MAA1C,CAAiDD,OAAjD,EAA0D,KAA1D,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAApB;EACA,OAAO;IACLC,KAAK,EAAE,SAASA,KAAT,GAAiB;MACtBH,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;IACD,CAHI;IAILE,SAAS,EAAE,SAASA,SAAT,GAAqB;MAC9BJ,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;IACD,CANI;IAOLG,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;MAChC,IAAIV,OAAO,GAAGU,IAAI,CAACC,IAAL,CAAUC,KAAxB;;MAEA,IAAIR,aAAa,CAACJ,OAAD,CAAjB,EAA4B;QAC1BG,OAAO,CAACU,WAAR,CAAoB,IAAIf,YAAJ,CAAiBC,mBAAmB,CAACC,OAAD,CAApC,EAA+C,CAACI,aAAa,CAACJ,OAAD,CAAd,EAAyBU,IAAI,CAACC,IAA9B,CAA/C,CAApB;MACD,CAFD,MAEO;QACLP,aAAa,CAACJ,OAAD,CAAb,GAAyBU,IAAI,CAACC,IAA9B;MACD;;MAED,OAAO,KAAP;IACD;EAjBI,CAAP;AAmBD"},"metadata":{},"sourceType":"module"}