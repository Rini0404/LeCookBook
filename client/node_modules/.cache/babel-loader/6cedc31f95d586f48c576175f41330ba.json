{"ast":null,"code":"/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var inputThreshold = input.length / 2;\n\n  for (var _i2 = 0; _i2 < options.length; _i2++) {\n    var option = options[_i2];\n    var distance = lexicalDistance(input, option);\n    var threshold = Math.max(inputThreshold, option.length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (var i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (var j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (var _i3 = 1; _i3 <= aLength; _i3++) {\n    for (var _j = 1; _j <= bLength; _j++) {\n      var cost = a[_i3 - 1] === b[_j - 1] ? 0 : 1;\n      d[_i3][_j] = Math.min(d[_i3 - 1][_j] + 1, d[_i3][_j - 1] + 1, d[_i3 - 1][_j - 1] + cost);\n\n      if (_i3 > 1 && _j > 1 && a[_i3 - 1] === b[_j - 2] && a[_i3 - 2] === b[_j - 1]) {\n        d[_i3][_j] = Math.min(d[_i3][_j], d[_i3 - 2][_j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}","map":{"version":3,"names":["suggestionList","input","options","optionsByDistance","Object","create","inputThreshold","length","_i2","option","distance","lexicalDistance","threshold","Math","max","keys","sort","a","b","aStr","bStr","d","toLowerCase","aLength","bLength","i","j","_i3","_j","cost","min"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/jsutils/suggestionList.mjs"],"sourcesContent":["/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var inputThreshold = input.length / 2;\n\n  for (var _i2 = 0; _i2 < options.length; _i2++) {\n    var option = options[_i2];\n    var distance = lexicalDistance(input, option);\n    var threshold = Math.max(inputThreshold, option.length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (var i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (var j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (var _i3 = 1; _i3 <= aLength; _i3++) {\n    for (var _j = 1; _j <= bLength; _j++) {\n      var cost = a[_i3 - 1] === b[_j - 1] ? 0 : 1;\n      d[_i3][_j] = Math.min(d[_i3 - 1][_j] + 1, d[_i3][_j - 1] + 1, d[_i3 - 1][_j - 1] + cost);\n\n      if (_i3 > 1 && _j > 1 && a[_i3 - 1] === b[_j - 2] && a[_i3 - 2] === b[_j - 1]) {\n        d[_i3][_j] = Math.min(d[_i3][_j], d[_i3 - 2][_j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwC;EACrD,IAAIC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;EACA,IAAIC,cAAc,GAAGL,KAAK,CAACM,MAAN,GAAe,CAApC;;EAEA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,OAAO,CAACK,MAAhC,EAAwCC,GAAG,EAA3C,EAA+C;IAC7C,IAAIC,MAAM,GAAGP,OAAO,CAACM,GAAD,CAApB;IACA,IAAIE,QAAQ,GAAGC,eAAe,CAACV,KAAD,EAAQQ,MAAR,CAA9B;IACA,IAAIG,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASR,cAAT,EAAyBG,MAAM,CAACF,MAAP,GAAgB,CAAzC,EAA4C,CAA5C,CAAhB;;IAEA,IAAIG,QAAQ,IAAIE,SAAhB,EAA2B;MACzBT,iBAAiB,CAACM,MAAD,CAAjB,GAA4BC,QAA5B;IACD;EACF;;EAED,OAAON,MAAM,CAACW,IAAP,CAAYZ,iBAAZ,EAA+Ba,IAA/B,CAAoC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IACzD,OAAOf,iBAAiB,CAACc,CAAD,CAAjB,GAAuBd,iBAAiB,CAACe,CAAD,CAA/C;EACD,CAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASP,eAAT,CAAyBQ,IAAzB,EAA+BC,IAA/B,EAAqC;EACnC,IAAID,IAAI,KAAKC,IAAb,EAAmB;IACjB,OAAO,CAAP;EACD;;EAED,IAAIC,CAAC,GAAG,EAAR;EACA,IAAIJ,CAAC,GAAGE,IAAI,CAACG,WAAL,EAAR;EACA,IAAIJ,CAAC,GAAGE,IAAI,CAACE,WAAL,EAAR;EACA,IAAIC,OAAO,GAAGN,CAAC,CAACV,MAAhB;EACA,IAAIiB,OAAO,GAAGN,CAAC,CAACX,MAAhB,CATmC,CASX;;EAExB,IAAIU,CAAC,KAAKC,CAAV,EAAa;IACX,OAAO,CAAP;EACD;;EAED,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,OAArB,EAA8BE,CAAC,EAA/B,EAAmC;IACjCJ,CAAC,CAACI,CAAD,CAAD,GAAO,CAACA,CAAD,CAAP;EACD;;EAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,OAArB,EAA8BE,CAAC,EAA/B,EAAmC;IACjCL,CAAC,CAAC,CAAD,CAAD,CAAKK,CAAL,IAAUA,CAAV;EACD;;EAED,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAIJ,OAAzB,EAAkCI,GAAG,EAArC,EAAyC;IACvC,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIJ,OAAvB,EAAgCI,EAAE,EAAlC,EAAsC;MACpC,IAAIC,IAAI,GAAGZ,CAAC,CAACU,GAAG,GAAG,CAAP,CAAD,KAAeT,CAAC,CAACU,EAAE,GAAG,CAAN,CAAhB,GAA2B,CAA3B,GAA+B,CAA1C;MACAP,CAAC,CAACM,GAAD,CAAD,CAAOC,EAAP,IAAaf,IAAI,CAACiB,GAAL,CAAST,CAAC,CAACM,GAAG,GAAG,CAAP,CAAD,CAAWC,EAAX,IAAiB,CAA1B,EAA6BP,CAAC,CAACM,GAAD,CAAD,CAAOC,EAAE,GAAG,CAAZ,IAAiB,CAA9C,EAAiDP,CAAC,CAACM,GAAG,GAAG,CAAP,CAAD,CAAWC,EAAE,GAAG,CAAhB,IAAqBC,IAAtE,CAAb;;MAEA,IAAIF,GAAG,GAAG,CAAN,IAAWC,EAAE,GAAG,CAAhB,IAAqBX,CAAC,CAACU,GAAG,GAAG,CAAP,CAAD,KAAeT,CAAC,CAACU,EAAE,GAAG,CAAN,CAArC,IAAiDX,CAAC,CAACU,GAAG,GAAG,CAAP,CAAD,KAAeT,CAAC,CAACU,EAAE,GAAG,CAAN,CAArE,EAA+E;QAC7EP,CAAC,CAACM,GAAD,CAAD,CAAOC,EAAP,IAAaf,IAAI,CAACiB,GAAL,CAAST,CAAC,CAACM,GAAD,CAAD,CAAOC,EAAP,CAAT,EAAqBP,CAAC,CAACM,GAAG,GAAG,CAAP,CAAD,CAAWC,EAAE,GAAG,CAAhB,IAAqBC,IAA1C,CAAb;MACD;IACF;EACF;;EAED,OAAOR,CAAC,CAACE,OAAD,CAAD,CAAWC,OAAX,CAAP;AACD"},"metadata":{},"sourceType":"module"}