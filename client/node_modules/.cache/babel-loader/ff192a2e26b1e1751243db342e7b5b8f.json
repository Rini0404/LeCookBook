{"ast":null,"code":"import objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport keyValMap from '../jsutils/keyValMap';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { parseValue } from '../language/parser';\nimport { GraphQLDirective } from '../type/directives';\nimport { specifiedScalarTypes } from '../type/scalars';\nimport { introspectionTypes, TypeKind } from '../type/introspection';\nimport { GraphQLSchema } from '../type/schema';\nimport { isInputType, isOutputType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, assertNullableType, assertObjectType, assertInterfaceType } from '../type/definition';\nimport { valueFromAST } from './valueFromAST';\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, 'Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ' + inspect(introspection)); // Get the schema from the introspection result.\n\n  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  var typeMap = keyValMap(schemaIntrospection.types, function (typeIntrospection) {\n    return typeIntrospection.name;\n  }, function (typeIntrospection) {\n    return buildType(typeIntrospection);\n  });\n\n  for (var _i2 = 0, _ref2 = [].concat(specifiedScalarTypes, introspectionTypes); _i2 < _ref2.length; _i2++) {\n    var stdType = _ref2[_i2];\n\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + inspect(typeRef));\n    }\n\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    var type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure that a full introspection query is used in order to build a client schema.\"));\n    }\n\n    return type;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n\n    if (isInputType(type)) {\n      return type;\n    }\n\n    throw new Error('Introspection must provide input type for arguments, but received: ' + inspect(type) + '.');\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n\n    if (isOutputType(type)) {\n      return type;\n    }\n\n    throw new Error('Introspection must provide output type for fields, but received: ' + inspect(type) + '.');\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return assertObjectType(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return assertInterfaceType(type);\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:' + inspect(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + inspect(objectIntrospection));\n    }\n\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return objectIntrospection.interfaces.map(getInterfaceType);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + inspect(unionIntrospection));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + inspect(enumIntrospection));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + inspect(inputObjectIntrospection));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + inspect(typeIntrospection));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + inspect(fieldIntrospection));\n      }\n\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + inspect(directiveIntrospection));\n    }\n\n    if (!directiveIntrospection.locations) {\n      throw new Error('Introspection result missing directive locations: ' + inspect(directiveIntrospection));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}","map":{"version":3,"names":["objectValues","inspect","devAssert","keyValMap","isObjectLike","parseValue","GraphQLDirective","specifiedScalarTypes","introspectionTypes","TypeKind","GraphQLSchema","isInputType","isOutputType","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","assertNullableType","assertObjectType","assertInterfaceType","valueFromAST","buildClientSchema","introspection","options","__schema","schemaIntrospection","typeMap","types","typeIntrospection","name","buildType","_i2","_ref2","concat","length","stdType","queryType","getObjectType","mutationType","subscriptionType","directives","map","buildDirective","query","mutation","subscription","assumeValid","allowedLegacyNames","getType","typeRef","kind","LIST","itemRef","ofType","Error","NON_NULL","nullableRef","nullableType","getNamedType","typeName","type","getInputType","getOutputType","getInterfaceType","SCALAR","buildScalarDef","OBJECT","buildObjectDef","INTERFACE","buildInterfaceDef","UNION","buildUnionDef","ENUM","buildEnumDef","INPUT_OBJECT","buildInputObjectDef","scalarIntrospection","description","objectIntrospection","interfaces","fields","buildFieldDefMap","interfaceIntrospection","unionIntrospection","possibleTypes","enumIntrospection","enumValues","values","valueIntrospection","deprecationReason","inputObjectIntrospection","inputFields","buildInputValueDefMap","fieldIntrospection","args","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","defaultValue","undefined","directiveIntrospection","locations","slice"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/utilities/buildClientSchema.mjs"],"sourcesContent":["import objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport keyValMap from '../jsutils/keyValMap';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { parseValue } from '../language/parser';\nimport { GraphQLDirective } from '../type/directives';\nimport { specifiedScalarTypes } from '../type/scalars';\nimport { introspectionTypes, TypeKind } from '../type/introspection';\nimport { GraphQLSchema } from '../type/schema';\nimport { isInputType, isOutputType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, assertNullableType, assertObjectType, assertInterfaceType } from '../type/definition';\nimport { valueFromAST } from './valueFromAST';\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, 'Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ' + inspect(introspection)); // Get the schema from the introspection result.\n\n  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  var typeMap = keyValMap(schemaIntrospection.types, function (typeIntrospection) {\n    return typeIntrospection.name;\n  }, function (typeIntrospection) {\n    return buildType(typeIntrospection);\n  });\n\n  for (var _i2 = 0, _ref2 = [].concat(specifiedScalarTypes, introspectionTypes); _i2 < _ref2.length; _i2++) {\n    var stdType = _ref2[_i2];\n\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + inspect(typeRef));\n    }\n\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    var type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure that a full introspection query is used in order to build a client schema.\"));\n    }\n\n    return type;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n\n    if (isInputType(type)) {\n      return type;\n    }\n\n    throw new Error('Introspection must provide input type for arguments, but received: ' + inspect(type) + '.');\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n\n    if (isOutputType(type)) {\n      return type;\n    }\n\n    throw new Error('Introspection must provide output type for fields, but received: ' + inspect(type) + '.');\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return assertObjectType(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return assertInterfaceType(type);\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:' + inspect(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + inspect(objectIntrospection));\n    }\n\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return objectIntrospection.interfaces.map(getInterfaceType);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + inspect(unionIntrospection));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + inspect(enumIntrospection));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + inspect(inputObjectIntrospection));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + inspect(typeIntrospection));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + inspect(fieldIntrospection));\n      }\n\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + inspect(directiveIntrospection));\n    }\n\n    if (!directiveIntrospection.locations) {\n      throw new Error('Introspection result missing directive locations: ' + inspect(directiveIntrospection));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}