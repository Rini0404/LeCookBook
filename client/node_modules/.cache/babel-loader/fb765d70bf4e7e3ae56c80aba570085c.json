{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateFragmentNameMessage(fragName) {\n  return \"There can be only one fragment named \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\n\nexport function UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateFragmentNameMessage","fragName","concat","UniqueFragmentNames","context","knownFragmentNames","Object","create","OperationDefinition","FragmentDefinition","node","fragmentName","name","value","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueFragmentNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateFragmentNameMessage(fragName) {\n  return \"There can be only one fragment named \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\n\nexport function UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,4BAAT,CAAsCC,QAAtC,EAAgD;EACrD,OAAO,0CAA0CC,MAA1C,CAAiDD,QAAjD,EAA2D,KAA3D,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,IAAIC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;EACA,OAAO;IACLC,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;MAClD,OAAO,KAAP;IACD,CAHI;IAILC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;MACpD,IAAIC,YAAY,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA7B;;MAEA,IAAIR,kBAAkB,CAACM,YAAD,CAAtB,EAAsC;QACpCP,OAAO,CAACU,WAAR,CAAoB,IAAIf,YAAJ,CAAiBC,4BAA4B,CAACW,YAAD,CAA7C,EAA6D,CAACN,kBAAkB,CAACM,YAAD,CAAnB,EAAmCD,IAAI,CAACE,IAAxC,CAA7D,CAApB;MACD,CAFD,MAEO;QACLP,kBAAkB,CAACM,YAAD,CAAlB,GAAmCD,IAAI,CAACE,IAAxC;MACD;;MAED,OAAO,KAAP;IACD;EAdI,CAAP;AAgBD"},"metadata":{},"sourceType":"module"}