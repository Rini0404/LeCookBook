{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateTypeNameMessage(typeName) {\n  return \"There can be only one type named \\\"\".concat(typeName, \"\\\".\");\n}\nexport function existedTypeNameMessage(typeName) {\n  return \"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\");\n}\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\nexport function UniqueTypeNames(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(existedTypeNameMessage(typeName), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(duplicateTypeNameMessage(typeName), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","duplicateTypeNameMessage","typeName","concat","existedTypeNameMessage","UniqueTypeNames","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","name","value","getType","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueTypeNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateTypeNameMessage(typeName) {\n  return \"There can be only one type named \\\"\".concat(typeName, \"\\\".\");\n}\nexport function existedTypeNameMessage(typeName) {\n  return \"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\");\n}\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\nexport function UniqueTypeNames(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(existedTypeNameMessage(typeName), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(duplicateTypeNameMessage(typeName), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;EACjD,OAAO,sCAAsCC,MAAtC,CAA6CD,QAA7C,EAAuD,KAAvD,CAAP;AACD;AACD,OAAO,SAASE,sBAAT,CAAgCF,QAAhC,EAA0C;EAC/C,OAAO,UAAUC,MAAV,CAAiBD,QAAjB,EAA2B,qFAA3B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,eAAT,CAAyBC,OAAzB,EAAkC;EACvC,IAAIC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;EACA,IAAIC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAb;EACA,OAAO;IACLC,oBAAoB,EAAEC,aADjB;IAELC,oBAAoB,EAAED,aAFjB;IAGLE,uBAAuB,EAAEF,aAHpB;IAILG,mBAAmB,EAAEH,aAJhB;IAKLI,kBAAkB,EAAEJ,aALf;IAMLK,yBAAyB,EAAEL;EANtB,CAAP;;EASA,SAASA,aAAT,CAAuBM,IAAvB,EAA6B;IAC3B,IAAIjB,QAAQ,GAAGiB,IAAI,CAACC,IAAL,CAAUC,KAAzB;;IAEA,IAAIX,MAAM,IAAIA,MAAM,CAACY,OAAP,CAAepB,QAAf,CAAd,EAAwC;MACtCI,OAAO,CAACiB,WAAR,CAAoB,IAAIvB,YAAJ,CAAiBI,sBAAsB,CAACF,QAAD,CAAvC,EAAmDiB,IAAI,CAACC,IAAxD,CAApB;MACA;IACD;;IAED,IAAIb,cAAc,CAACL,QAAD,CAAlB,EAA8B;MAC5BI,OAAO,CAACiB,WAAR,CAAoB,IAAIvB,YAAJ,CAAiBC,wBAAwB,CAACC,QAAD,CAAzC,EAAqD,CAACK,cAAc,CAACL,QAAD,CAAf,EAA2BiB,IAAI,CAACC,IAAhC,CAArD,CAApB;IACD,CAFD,MAEO;MACLb,cAAc,CAACL,QAAD,CAAd,GAA2BiB,IAAI,CAACC,IAAhC;IACD;;IAED,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}