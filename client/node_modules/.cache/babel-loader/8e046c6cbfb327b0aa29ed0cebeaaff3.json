{"ast":null,"code":"import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n// @internal\n\n\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}","map":{"version":3,"names":["defineToJSON","syntaxError","dedentBlockStringValue","TokenKind","createLexer","source","options","startOfFileToken","Tok","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","isPunctuatorToken","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","start","end","column","prev","value","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","concat","toString","toUpperCase","slice","body","bodyLength","length","pos","positionAfterWhitespace","col","charCodeAt","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","FLOAT","INT","chunkStart","STRING","charCode","uniCharCode","invalidSequence","rawValue","BLOCK_STRING","a","b","c","d","char2hex","NAME"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/language/lexer.mjs"],"sourcesContent":["import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}