{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition';\nexport function duplicateFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\");\n}\nexport function existedFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    }\n\n    if (node.fields) {\n      var fieldNames = knownFieldNames[typeName];\n\n      for (var _i2 = 0, _node$fields2 = node.fields; _i2 < _node$fields2.length; _i2++) {\n        var fieldDef = _node$fields2[_i2];\n        var fieldName = fieldDef.name.value;\n\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(existedFieldDefinitionNameMessage(typeName, fieldName), fieldDef.name));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(duplicateFieldDefinitionNameMessage(typeName, fieldName), [fieldNames[fieldName], fieldDef.name]));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName];\n  }\n\n  return false;\n}","map":{"version":3,"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","duplicateFieldDefinitionNameMessage","typeName","fieldName","concat","existedFieldDefinitionNameMessage","UniqueFieldDefinitionNames","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","name","value","fields","fieldNames","_i2","_node$fields2","length","fieldDef","hasField","reportError","type","getFields"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueFieldDefinitionNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition';\nexport function duplicateFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\");\n}\nexport function existedFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    }\n\n    if (node.fields) {\n      var fieldNames = knownFieldNames[typeName];\n\n      for (var _i2 = 0, _node$fields2 = node.fields; _i2 < _node$fields2.length; _i2++) {\n        var fieldDef = _node$fields2[_i2];\n        var fieldName = fieldDef.name.value;\n\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(existedFieldDefinitionNameMessage(typeName, fieldName), fieldDef.name));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(duplicateFieldDefinitionNameMessage(typeName, fieldName), [fieldNames[fieldName], fieldDef.name]));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName];\n  }\n\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}