{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateInputFieldMessage(fieldName) {\n  return \"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\");\n}\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\n\nexport function UniqueInputFieldNames(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateInputFieldMessage","fieldName","concat","UniqueInputFieldNames","context","knownNameStack","knownNames","Object","create","ObjectValue","enter","push","leave","pop","ObjectField","node","name","value","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueInputFieldNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateInputFieldMessage(fieldName) {\n  return \"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\");\n}\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\n\nexport function UniqueInputFieldNames(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,0BAAT,CAAoCC,SAApC,EAA+C;EACpD,OAAO,6CAA6CC,MAA7C,CAAoDD,SAApD,EAA+D,KAA/D,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,qBAAT,CAA+BC,OAA/B,EAAwC;EAC7C,IAAIC,cAAc,GAAG,EAArB;EACA,IAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;EACA,OAAO;IACLC,WAAW,EAAE;MACXC,KAAK,EAAE,SAASA,KAAT,GAAiB;QACtBL,cAAc,CAACM,IAAf,CAAoBL,UAApB;QACAA,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;MACD,CAJU;MAKXI,KAAK,EAAE,SAASA,KAAT,GAAiB;QACtBN,UAAU,GAAGD,cAAc,CAACQ,GAAf,EAAb;MACD;IAPU,CADR;IAULC,WAAW,EAAE,SAASA,WAAT,CAAqBC,IAArB,EAA2B;MACtC,IAAId,SAAS,GAAGc,IAAI,CAACC,IAAL,CAAUC,KAA1B;;MAEA,IAAIX,UAAU,CAACL,SAAD,CAAd,EAA2B;QACzBG,OAAO,CAACc,WAAR,CAAoB,IAAInB,YAAJ,CAAiBC,0BAA0B,CAACC,SAAD,CAA3C,EAAwD,CAACK,UAAU,CAACL,SAAD,CAAX,EAAwBc,IAAI,CAACC,IAA7B,CAAxD,CAApB;MACD,CAFD,MAEO;QACLV,UAAU,CAACL,SAAD,CAAV,GAAwBc,IAAI,CAACC,IAA7B;MACD;IACF;EAlBI,CAAP;AAoBD"},"metadata":{},"sourceType":"module"}