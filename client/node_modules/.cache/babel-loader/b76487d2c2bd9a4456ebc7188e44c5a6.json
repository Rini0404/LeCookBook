{"ast":null,"code":"import isPromise from './isPromise';\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\n\nexport default function promiseReduce(values, callback, initialValue) {\n  return values.reduce(function (previous, value) {\n    return isPromise(previous) ? previous.then(function (resolved) {\n      return callback(resolved, value);\n    }) : callback(previous, value);\n  }, initialValue);\n}","map":{"version":3,"names":["isPromise","promiseReduce","values","callback","initialValue","reduce","previous","value","then","resolved"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/jsutils/promiseReduce.mjs"],"sourcesContent":["import isPromise from './isPromise';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport default function promiseReduce(values, callback, initialValue) {\n  return values.reduce(function (previous, value) {\n    return isPromise(previous) ? previous.then(function (resolved) {\n      return callback(resolved, value);\n    }) : callback(previous, value);\n  }, initialValue);\n}\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,YAAzC,EAAuD;EACpE,OAAOF,MAAM,CAACG,MAAP,CAAc,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;IAC9C,OAAOP,SAAS,CAACM,QAAD,CAAT,GAAsBA,QAAQ,CAACE,IAAT,CAAc,UAAUC,QAAV,EAAoB;MAC7D,OAAON,QAAQ,CAACM,QAAD,EAAWF,KAAX,CAAf;IACD,CAF4B,CAAtB,GAEFJ,QAAQ,CAACG,QAAD,EAAWC,KAAX,CAFb;EAGD,CAJM,EAIJH,YAJI,CAAP;AAKD"},"metadata":{},"sourceType":"module"}