{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { visit } from '../language/visitor';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport { astFromValue } from './astFromValue';\nexport var BreakingChangeType = Object.freeze({\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'\n});\nexport var DangerousChangeType = Object.freeze({\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'\n});\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\n\nexport function findBreakingChanges(oldSchema, newSchema) {\n  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n  return dangerousChanges;\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {\n    var oldDirective = _directivesDiff$remov2[_i2];\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: \"\".concat(oldDirective.name, \" was removed.\")\n    });\n  }\n\n  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {\n    var _ref2 = _directivesDiff$persi2[_i4];\n    var _oldDirective = _ref2[0];\n    var newDirective = _ref2[1];\n    var argsDiff = diff(_oldDirective.args, newDirective.args);\n\n    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {\n      var newArg = _argsDiff$added2[_i6];\n\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n        });\n      }\n    }\n\n    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {\n      var oldArg = _argsDiff$removed2[_i8];\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n      });\n    }\n\n    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {\n      var location = _oldDirective$locatio2[_i10];\n\n      if (newDirective.locations.indexOf(location) === -1) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(objectValues(oldSchema.getTypeMap()), objectValues(newSchema.getTypeMap()));\n\n  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {\n    var oldType = _typesDiff$removed2[_i12];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: \"\".concat(oldType.name, \" was removed.\")\n    });\n  }\n\n  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {\n    var _ref4 = _typesDiff$persisted2[_i14];\n    var _oldType = _ref4[0];\n    var newType = _ref4[1];\n\n    if (isEnumType(_oldType) && isEnumType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));\n    } else if (isUnionType(_oldType) && isUnionType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));\n    } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));\n    } else if (isObjectType(_oldType) && isObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findObjectTypeChanges(_oldType, newType));\n    } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType));\n    } else if (_oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {\n    var newField = _fieldsDiff$added2[_i16];\n\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    }\n  }\n\n  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {\n    var oldField = _fieldsDiff$removed2[_i18];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {\n    var _ref6 = _fieldsDiff$persisted2[_i20];\n    var _oldField = _ref6[0];\n    var _newField = _ref6[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {\n    var newPossibleType = _possibleTypesDiff$ad2[_i22];\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {\n    var oldPossibleType = _possibleTypesDiff$re2[_i24];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {\n    var newValue = _valuesDiff$added2[_i26];\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {\n    var oldValue = _valuesDiff$removed2[_i28];\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findObjectTypeChanges(oldType, newType) {\n  var schemaChanges = findFieldChanges(oldType, newType);\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {\n    var newInterface = _interfacesDiff$added2[_i30];\n    schemaChanges.push({\n      type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n      description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {\n    var oldInterface = _interfacesDiff$remov2[_i32];\n    schemaChanges.push({\n      type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n      description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {\n    var oldField = _fieldsDiff$removed4[_i34];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {\n    var _ref8 = _fieldsDiff$persisted4[_i36];\n    var _oldField2 = _ref8[0];\n    var newField = _ref8[1];\n    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));\n    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n\n  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {\n    var oldArg = _argsDiff$removed4[_i38];\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n    });\n  }\n\n  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {\n    var _ref10 = _argsDiff$persisted2[_i40];\n    var _oldArg = _ref10[0];\n    var newArg = _ref10[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n      });\n    } else if (_oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n          });\n        }\n      }\n    }\n  }\n\n  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {\n    var _newArg = _argsDiff$added4[_i42];\n\n    if (isRequiredArgument(_newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n  /* istanbul ignore else */\n\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  } // Not reachable. All possible named types have been considered.\n\n  /* istanbul ignore next */\n\n\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n  /* istanbul ignore next */\n\n  ast != null || invariant(0);\n  var sortedAST = visit(ast, {\n    ObjectValue: function ObjectValue(objectNode) {\n      var fields = [].concat(objectNode.fields).sort(function (fieldA, fieldB) {\n        return fieldA.name.value.localeCompare(fieldB.name.value);\n      });\n      return _objectSpread({}, objectNode, {\n        fields: fields\n      });\n    }\n  });\n  return print(sortedAST);\n}\n\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref11) {\n    var name = _ref11.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref12) {\n    var name = _ref12.name;\n    return name;\n  });\n\n  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {\n    var oldItem = oldArray[_i44];\n    var newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (var _i46 = 0; _i46 < newArray.length; _i46++) {\n    var _newItem = newArray[_i46];\n\n    if (oldMap[_newItem.name] === undefined) {\n      added.push(_newItem);\n    }\n  }\n\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","objectValues","keyMap","inspect","invariant","print","visit","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isNonNullType","isListType","isNamedType","isRequiredArgument","isRequiredInputField","astFromValue","BreakingChangeType","freeze","TYPE_REMOVED","TYPE_CHANGED_KIND","TYPE_REMOVED_FROM_UNION","VALUE_REMOVED_FROM_ENUM","REQUIRED_INPUT_FIELD_ADDED","INTERFACE_REMOVED_FROM_OBJECT","FIELD_REMOVED","FIELD_CHANGED_KIND","REQUIRED_ARG_ADDED","ARG_REMOVED","ARG_CHANGED_KIND","DIRECTIVE_REMOVED","DIRECTIVE_ARG_REMOVED","REQUIRED_DIRECTIVE_ARG_ADDED","DIRECTIVE_LOCATION_REMOVED","DangerousChangeType","VALUE_ADDED_TO_ENUM","TYPE_ADDED_TO_UNION","OPTIONAL_INPUT_FIELD_ADDED","OPTIONAL_ARG_ADDED","INTERFACE_ADDED_TO_OBJECT","ARG_DEFAULT_VALUE_CHANGE","findBreakingChanges","oldSchema","newSchema","breakingChanges","findSchemaChanges","change","type","findDangerousChanges","dangerousChanges","concat","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","_i2","_directivesDiff$remov2","removed","oldDirective","description","name","_i4","_directivesDiff$persi2","persisted","_ref2","_oldDirective","newDirective","argsDiff","args","_i6","_argsDiff$added2","added","newArg","_i8","_argsDiff$removed2","oldArg","_i10","_oldDirective$locatio2","locations","location","indexOf","typesDiff","getTypeMap","_i12","_typesDiff$removed2","oldType","_i14","_typesDiff$persisted2","_ref4","_oldType","newType","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findObjectTypeChanges","findFieldChanges","constructor","typeKindName","fieldsDiff","getFields","_i16","_fieldsDiff$added2","newField","_i18","_fieldsDiff$removed2","oldField","_i20","_fieldsDiff$persisted2","_ref6","_oldField","_newField","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","String","possibleTypesDiff","getTypes","_i22","_possibleTypesDiff$ad2","newPossibleType","_i24","_possibleTypesDiff$re2","oldPossibleType","valuesDiff","getValues","_i26","_valuesDiff$added2","newValue","_i28","_valuesDiff$removed2","oldValue","interfacesDiff","getInterfaces","_i30","_interfacesDiff$added2","newInterface","_i32","_interfacesDiff$remov2","oldInterface","_i34","_fieldsDiff$removed4","_i36","_fieldsDiff$persisted4","_ref8","_oldField2","findArgChanges","isChangeSafeForObjectOrInterfaceField","_i38","_argsDiff$removed4","_i40","_argsDiff$persisted2","_ref10","_oldArg","defaultValue","undefined","oldValueStr","stringifyValue","newValueStr","_i42","_argsDiff$added4","_newArg","ofType","ast","sortedAST","ObjectValue","objectNode","fields","sort","fieldA","fieldB","localeCompare","oldArray","newArray","oldMap","_ref11","newMap","_ref12","_i44","oldItem","newItem","_i46","_newItem"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/utilities/findBreakingChanges.mjs"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { visit } from '../language/visitor';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport { astFromValue } from './astFromValue';\nexport var BreakingChangeType = Object.freeze({\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'\n});\nexport var DangerousChangeType = Object.freeze({\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'\n});\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n  return dangerousChanges;\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {\n    var oldDirective = _directivesDiff$remov2[_i2];\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: \"\".concat(oldDirective.name, \" was removed.\")\n    });\n  }\n\n  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {\n    var _ref2 = _directivesDiff$persi2[_i4];\n    var _oldDirective = _ref2[0];\n    var newDirective = _ref2[1];\n    var argsDiff = diff(_oldDirective.args, newDirective.args);\n\n    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {\n      var newArg = _argsDiff$added2[_i6];\n\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n        });\n      }\n    }\n\n    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {\n      var oldArg = _argsDiff$removed2[_i8];\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n      });\n    }\n\n    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {\n      var location = _oldDirective$locatio2[_i10];\n\n      if (newDirective.locations.indexOf(location) === -1) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(objectValues(oldSchema.getTypeMap()), objectValues(newSchema.getTypeMap()));\n\n  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {\n    var oldType = _typesDiff$removed2[_i12];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: \"\".concat(oldType.name, \" was removed.\")\n    });\n  }\n\n  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {\n    var _ref4 = _typesDiff$persisted2[_i14];\n    var _oldType = _ref4[0];\n    var newType = _ref4[1];\n\n    if (isEnumType(_oldType) && isEnumType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));\n    } else if (isUnionType(_oldType) && isUnionType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));\n    } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));\n    } else if (isObjectType(_oldType) && isObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findObjectTypeChanges(_oldType, newType));\n    } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType));\n    } else if (_oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {\n    var newField = _fieldsDiff$added2[_i16];\n\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    }\n  }\n\n  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {\n    var oldField = _fieldsDiff$removed2[_i18];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {\n    var _ref6 = _fieldsDiff$persisted2[_i20];\n    var _oldField = _ref6[0];\n    var _newField = _ref6[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {\n    var newPossibleType = _possibleTypesDiff$ad2[_i22];\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {\n    var oldPossibleType = _possibleTypesDiff$re2[_i24];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {\n    var newValue = _valuesDiff$added2[_i26];\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {\n    var oldValue = _valuesDiff$removed2[_i28];\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findObjectTypeChanges(oldType, newType) {\n  var schemaChanges = findFieldChanges(oldType, newType);\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {\n    var newInterface = _interfacesDiff$added2[_i30];\n    schemaChanges.push({\n      type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n      description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {\n    var oldInterface = _interfacesDiff$remov2[_i32];\n    schemaChanges.push({\n      type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n      description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {\n    var oldField = _fieldsDiff$removed4[_i34];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {\n    var _ref8 = _fieldsDiff$persisted4[_i36];\n    var _oldField2 = _ref8[0];\n    var newField = _ref8[1];\n    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));\n    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n\n  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {\n    var oldArg = _argsDiff$removed4[_i38];\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n    });\n  }\n\n  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {\n    var _ref10 = _argsDiff$persisted2[_i40];\n    var _oldArg = _ref10[0];\n    var newArg = _ref10[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n      });\n    } else if (_oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n          });\n        }\n      }\n    }\n  }\n\n  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {\n    var _newArg = _argsDiff$added4[_i42];\n\n    if (isRequiredArgument(_newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  /* istanbul ignore else */\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  } // Not reachable. All possible named types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n\n  /* istanbul ignore next */\n  ast != null || invariant(0);\n  var sortedAST = visit(ast, {\n    ObjectValue: function ObjectValue(objectNode) {\n      var fields = [].concat(objectNode.fields).sort(function (fieldA, fieldB) {\n        return fieldA.name.value.localeCompare(fieldB.name.value);\n      });\n      return _objectSpread({}, objectNode, {\n        fields: fields\n      });\n    }\n  });\n  return print(sortedAST);\n}\n\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref11) {\n    var name = _ref11.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref12) {\n    var name = _ref12.name;\n    return name;\n  });\n\n  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {\n    var oldItem = oldArray[_i44];\n    var newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (var _i46 = 0; _i46 < newArray.length; _i46++) {\n    var _newItem = newArray[_i46];\n\n    if (oldMap[_newItem.name] === undefined) {\n      added.push(_newItem);\n    }\n  }\n\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}