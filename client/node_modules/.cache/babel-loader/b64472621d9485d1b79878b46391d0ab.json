{"ast":null,"code":"import { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/ValidationContext';\nimport { GraphQLSchema } from '../type/schema';\nimport { TypeInfo } from './TypeInfo';\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n *\n * This function will be removed in v15\n */\n\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = {\n    kind: Kind.DOCUMENT,\n    definitions: []\n  };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}","map":{"version":3,"names":["Kind","visit","visitWithTypeInfo","ValuesOfCorrectType","ValidationContext","GraphQLSchema","TypeInfo","isValidLiteralValue","type","valueNode","emptySchema","emptyDoc","kind","DOCUMENT","definitions","typeInfo","undefined","context","visitor","getErrors"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/utilities/isValidLiteralValue.mjs"],"sourcesContent":["import { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/ValidationContext';\nimport { GraphQLSchema } from '../type/schema';\nimport { TypeInfo } from './TypeInfo';\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n *\n * This function will be removed in v15\n */\n\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = {\n    kind: Kind.DOCUMENT,\n    definitions: []\n  };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,KAAT,EAAgBC,iBAAhB,QAAyC,qBAAzC;AACA,SAASC,mBAAT,QAAoC,yCAApC;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,SAAnC,EAA8C;EACnD,IAAIC,WAAW,GAAG,IAAIL,aAAJ,CAAkB,EAAlB,CAAlB;EACA,IAAIM,QAAQ,GAAG;IACbC,IAAI,EAAEZ,IAAI,CAACa,QADE;IAEbC,WAAW,EAAE;EAFA,CAAf;EAIA,IAAIC,QAAQ,GAAG,IAAIT,QAAJ,CAAaI,WAAb,EAA0BM,SAA1B,EAAqCR,IAArC,CAAf;EACA,IAAIS,OAAO,GAAG,IAAIb,iBAAJ,CAAsBM,WAAtB,EAAmCC,QAAnC,EAA6CI,QAA7C,CAAd;EACA,IAAIG,OAAO,GAAGf,mBAAmB,CAACc,OAAD,CAAjC;EACAhB,KAAK,CAACQ,SAAD,EAAYP,iBAAiB,CAACa,QAAD,EAAWG,OAAX,CAA7B,CAAL;EACA,OAAOD,OAAO,CAACE,SAAR,EAAP;AACD"},"metadata":{},"sourceType":"module"}