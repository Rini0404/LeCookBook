{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationNameMessage(operationName) {\n  return \"There can be only one operation named \\\"\".concat(operationName, \"\\\".\");\n}\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\n\nexport function UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateOperationNameMessage","operationName","concat","UniqueOperationNames","context","knownOperationNames","Object","create","OperationDefinition","node","name","value","reportError","FragmentDefinition"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueOperationNames.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationNameMessage(operationName) {\n  return \"There can be only one operation named \\\"\".concat(operationName, \"\\\".\");\n}\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\n\nexport function UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,6BAAT,CAAuCC,aAAvC,EAAsD;EAC3D,OAAO,2CAA2CC,MAA3C,CAAkDD,aAAlD,EAAiE,KAAjE,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,oBAAT,CAA8BC,OAA9B,EAAuC;EAC5C,IAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;EACA,OAAO;IACLC,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;MACtD,IAAIR,aAAa,GAAGQ,IAAI,CAACC,IAAzB;;MAEA,IAAIT,aAAJ,EAAmB;QACjB,IAAII,mBAAmB,CAACJ,aAAa,CAACU,KAAf,CAAvB,EAA8C;UAC5CP,OAAO,CAACQ,WAAR,CAAoB,IAAIb,YAAJ,CAAiBC,6BAA6B,CAACC,aAAa,CAACU,KAAf,CAA9C,EAAqE,CAACN,mBAAmB,CAACJ,aAAa,CAACU,KAAf,CAApB,EAA2CV,aAA3C,CAArE,CAApB;QACD,CAFD,MAEO;UACLI,mBAAmB,CAACJ,aAAa,CAACU,KAAf,CAAnB,GAA2CV,aAA3C;QACD;MACF;;MAED,OAAO,KAAP;IACD,CAbI;IAcLY,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;MAChD,OAAO,KAAP;IACD;EAhBI,CAAP;AAkBD"},"metadata":{},"sourceType":"module"}