{"ast":null,"code":"import { GraphQLError } from '../error/GraphQLError';\n/**\n * Extracts the root type of the operation from the schema.\n */\n\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    var queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new GraphQLError('Schema does not define the required query root type.', operation);\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    var mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', operation);\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    var subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', operation);\n    }\n\n    return subscriptionType;\n  }\n\n  throw new GraphQLError('Can only have query, mutation and subscription operations.', operation);\n}","map":{"version":3,"names":["GraphQLError","getOperationRootType","schema","operation","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/utilities/getOperationRootType.mjs"],"sourcesContent":["import { GraphQLError } from '../error/GraphQLError';\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    var queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new GraphQLError('Schema does not define the required query root type.', operation);\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    var mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', operation);\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    var subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', operation);\n    }\n\n    return subscriptionType;\n  }\n\n  throw new GraphQLError('Can only have query, mutation and subscription operations.', operation);\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AAEA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,SAAtC,EAAiD;EACtD,IAAIA,SAAS,CAACA,SAAV,KAAwB,OAA5B,EAAqC;IACnC,IAAIC,SAAS,GAAGF,MAAM,CAACG,YAAP,EAAhB;;IAEA,IAAI,CAACD,SAAL,EAAgB;MACd,MAAM,IAAIJ,YAAJ,CAAiB,sDAAjB,EAAyEG,SAAzE,CAAN;IACD;;IAED,OAAOC,SAAP;EACD;;EAED,IAAID,SAAS,CAACA,SAAV,KAAwB,UAA5B,EAAwC;IACtC,IAAIG,YAAY,GAAGJ,MAAM,CAACK,eAAP,EAAnB;;IAEA,IAAI,CAACD,YAAL,EAAmB;MACjB,MAAM,IAAIN,YAAJ,CAAiB,yCAAjB,EAA4DG,SAA5D,CAAN;IACD;;IAED,OAAOG,YAAP;EACD;;EAED,IAAIH,SAAS,CAACA,SAAV,KAAwB,cAA5B,EAA4C;IAC1C,IAAIK,gBAAgB,GAAGN,MAAM,CAACO,mBAAP,EAAvB;;IAEA,IAAI,CAACD,gBAAL,EAAuB;MACrB,MAAM,IAAIR,YAAJ,CAAiB,6CAAjB,EAAgEG,SAAhE,CAAN;IACD;;IAED,OAAOK,gBAAP;EACD;;EAED,MAAM,IAAIR,YAAJ,CAAiB,4DAAjB,EAA+EG,SAA/E,CAAN;AACD"},"metadata":{},"sourceType":"module"}