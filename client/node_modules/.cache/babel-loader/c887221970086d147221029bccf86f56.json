{"ast":null,"code":"import inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n  /* eslint-disable no-undef-init */\n\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}","map":{"version":3,"names":["inspect","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","BREAK","Object","freeze","visit","root","visitor","visitorKeys","arguments","length","undefined","stack","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","newRoot","isLeaving","isEdited","pop","slice","clone","_i2","_Object$keys2","k","editOffset","ii","editKey","editValue","splice","prev","push","result","isNode","Error","visitFn","getVisitFn","kind","call","maybeNode","Boolean","visitInParallel","visitors","skipping","enter","i","fn","apply","leave","visitWithTypeInfo","typeInfo","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/language/visitor.mjs"],"sourcesContent":["import inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}