{"ast":null,"code":"/* istanbul ignore file */\nimport inspect from '../jsutils/inspect';\nimport printPathArray from '../jsutils/printPathArray';\nimport { pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { coerceInputValue } from './coerceInputValue';\n/**\n * Deprecated. Use coerceInputValue() directly for richer information.\n *\n * This function will be removed in v15\n */\n\nexport function coerceValue(inputValue, type, blameNode, path) {\n  var errors = [];\n  var value = coerceInputValue(inputValue, type, function (errorPath, invalidValue, error) {\n    var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n    var pathArray = [].concat(pathToArray(path), errorPath);\n\n    if (pathArray.length > 0) {\n      errorPrefix += \" at \\\"value\".concat(printPathArray(pathArray), \"\\\"\");\n    }\n\n    errors.push(new GraphQLError(errorPrefix + ': ' + error.message, blameNode, undefined, undefined, undefined, error.originalError));\n  });\n  return errors.length > 0 ? {\n    errors: errors,\n    value: undefined\n  } : {\n    errors: undefined,\n    value: value\n  };\n}","map":{"version":3,"names":["inspect","printPathArray","pathToArray","GraphQLError","coerceInputValue","coerceValue","inputValue","type","blameNode","path","errors","value","errorPath","invalidValue","error","errorPrefix","pathArray","concat","length","push","message","undefined","originalError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/utilities/coerceValue.mjs"],"sourcesContent":["/* istanbul ignore file */\nimport inspect from '../jsutils/inspect';\nimport printPathArray from '../jsutils/printPathArray';\nimport { pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { coerceInputValue } from './coerceInputValue';\n\n/**\n * Deprecated. Use coerceInputValue() directly for richer information.\n *\n * This function will be removed in v15\n */\nexport function coerceValue(inputValue, type, blameNode, path) {\n  var errors = [];\n  var value = coerceInputValue(inputValue, type, function (errorPath, invalidValue, error) {\n    var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n    var pathArray = [].concat(pathToArray(path), errorPath);\n\n    if (pathArray.length > 0) {\n      errorPrefix += \" at \\\"value\".concat(printPathArray(pathArray), \"\\\"\");\n    }\n\n    errors.push(new GraphQLError(errorPrefix + ': ' + error.message, blameNode, undefined, undefined, undefined, error.originalError));\n  });\n  return errors.length > 0 ? {\n    errors: errors,\n    value: undefined\n  } : {\n    errors: undefined,\n    value: value\n  };\n}\n"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,IAAjC,EAAuCC,SAAvC,EAAkDC,IAAlD,EAAwD;EAC7D,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,KAAK,GAAGP,gBAAgB,CAACE,UAAD,EAAaC,IAAb,EAAmB,UAAUK,SAAV,EAAqBC,YAArB,EAAmCC,KAAnC,EAA0C;IACvF,IAAIC,WAAW,GAAG,mBAAmBf,OAAO,CAACa,YAAD,CAA5C;IACA,IAAIG,SAAS,GAAG,GAAGC,MAAH,CAAUf,WAAW,CAACO,IAAD,CAArB,EAA6BG,SAA7B,CAAhB;;IAEA,IAAII,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;MACxBH,WAAW,IAAI,cAAcE,MAAd,CAAqBhB,cAAc,CAACe,SAAD,CAAnC,EAAgD,IAAhD,CAAf;IACD;;IAEDN,MAAM,CAACS,IAAP,CAAY,IAAIhB,YAAJ,CAAiBY,WAAW,GAAG,IAAd,GAAqBD,KAAK,CAACM,OAA5C,EAAqDZ,SAArD,EAAgEa,SAAhE,EAA2EA,SAA3E,EAAsFA,SAAtF,EAAiGP,KAAK,CAACQ,aAAvG,CAAZ;EACD,CAT2B,CAA5B;EAUA,OAAOZ,MAAM,CAACQ,MAAP,GAAgB,CAAhB,GAAoB;IACzBR,MAAM,EAAEA,MADiB;IAEzBC,KAAK,EAAEU;EAFkB,CAApB,GAGH;IACFX,MAAM,EAAEW,SADN;IAEFV,KAAK,EAAEA;EAFL,CAHJ;AAOD"},"metadata":{},"sourceType":"module"}