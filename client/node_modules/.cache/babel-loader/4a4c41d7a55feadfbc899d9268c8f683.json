{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isCompositeType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function inlineFragmentOnNonCompositeErrorMessage(type) {\n  return \"Fragment cannot condition on non composite type \\\"\".concat(type, \"\\\".\");\n}\nexport function fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" cannot condition on non composite type \\\"\").concat(type, \"\\\".\");\n}\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\nexport function FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), node.typeCondition));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isCompositeType","typeFromAST","inlineFragmentOnNonCompositeErrorMessage","type","concat","fragmentOnNonCompositeErrorMessage","fragName","FragmentsOnCompositeTypes","context","InlineFragment","node","typeCondition","getSchema","reportError","FragmentDefinition","name","value"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isCompositeType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function inlineFragmentOnNonCompositeErrorMessage(type) {\n  return \"Fragment cannot condition on non composite type \\\"\".concat(type, \"\\\".\");\n}\nexport function fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" cannot condition on non composite type \\\"\").concat(type, \"\\\".\");\n}\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\nexport function FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), node.typeCondition));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAO,SAASC,wCAAT,CAAkDC,IAAlD,EAAwD;EAC7D,OAAO,qDAAqDC,MAArD,CAA4DD,IAA5D,EAAkE,KAAlE,CAAP;AACD;AACD,OAAO,SAASE,kCAAT,CAA4CC,QAA5C,EAAsDH,IAAtD,EAA4D;EACjE,OAAO,cAAcC,MAAd,CAAqBE,QAArB,EAA+B,8CAA/B,EAA+EF,MAA/E,CAAsFD,IAAtF,EAA4F,KAA5F,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,yBAAT,CAAmCC,OAAnC,EAA4C;EACjD,OAAO;IACLC,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;MAC5C,IAAIC,aAAa,GAAGD,IAAI,CAACC,aAAzB;;MAEA,IAAIA,aAAJ,EAAmB;QACjB,IAAIR,IAAI,GAAGF,WAAW,CAACO,OAAO,CAACI,SAAR,EAAD,EAAsBD,aAAtB,CAAtB;;QAEA,IAAIR,IAAI,IAAI,CAACH,eAAe,CAACG,IAAD,CAA5B,EAAoC;UAClCK,OAAO,CAACK,WAAR,CAAoB,IAAIf,YAAJ,CAAiBI,wCAAwC,CAACH,KAAK,CAACY,aAAD,CAAN,CAAzD,EAAiFA,aAAjF,CAApB;QACD;MACF;IACF,CAXI;IAYLG,kBAAkB,EAAE,SAASA,kBAAT,CAA4BJ,IAA5B,EAAkC;MACpD,IAAIP,IAAI,GAAGF,WAAW,CAACO,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,aAA3B,CAAtB;;MAEA,IAAIR,IAAI,IAAI,CAACH,eAAe,CAACG,IAAD,CAA5B,EAAoC;QAClCK,OAAO,CAACK,WAAR,CAAoB,IAAIf,YAAJ,CAAiBO,kCAAkC,CAACK,IAAI,CAACK,IAAL,CAAUC,KAAX,EAAkBjB,KAAK,CAACW,IAAI,CAACC,aAAN,CAAvB,CAAnD,EAAiGD,IAAI,CAACC,aAAtG,CAApB;MACD;IACF;EAlBI,CAAP;AAoBD"},"metadata":{},"sourceType":"module"}