{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationTypeMessage(operation) {\n  return \"There can be only one \".concat(operation, \" type in schema.\");\n}\nexport function existedOperationTypeMessage(operation) {\n  return \"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\");\n}\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypes(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    if (node.operationTypes) {\n      for (var _i2 = 0, _ref2 = node.operationTypes || []; _i2 < _ref2.length; _i2++) {\n        var operationType = _ref2[_i2];\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(existedOperationTypeMessage(operation), operationType));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(duplicateOperationTypeMessage(operation), [alreadyDefinedOperationType, operationType]));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","duplicateOperationTypeMessage","operation","concat","existedOperationTypeMessage","UniqueOperationTypes","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","operationTypes","_i2","_ref2","length","operationType","alreadyDefinedOperationType","reportError"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/validation/rules/UniqueOperationTypes.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationTypeMessage(operation) {\n  return \"There can be only one \".concat(operation, \" type in schema.\");\n}\nexport function existedOperationTypeMessage(operation) {\n  return \"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\");\n}\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypes(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    if (node.operationTypes) {\n      for (var _i2 = 0, _ref2 = node.operationTypes || []; _i2 < _ref2.length; _i2++) {\n        var operationType = _ref2[_i2];\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(existedOperationTypeMessage(operation), operationType));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(duplicateOperationTypeMessage(operation), [alreadyDefinedOperationType, operationType]));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,6BAAT,CAAuCC,SAAvC,EAAkD;EACvD,OAAO,yBAAyBC,MAAzB,CAAgCD,SAAhC,EAA2C,kBAA3C,CAAP;AACD;AACD,OAAO,SAASE,2BAAT,CAAqCF,SAArC,EAAgD;EACrD,OAAO,YAAYC,MAAZ,CAAmBD,SAAnB,EAA8B,yDAA9B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;EAC5C,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAb;EACA,IAAIC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;EACA,IAAIC,sBAAsB,GAAGL,MAAM,GAAG;IACpCM,KAAK,EAAEN,MAAM,CAACO,YAAP,EAD6B;IAEpCC,QAAQ,EAAER,MAAM,CAACS,eAAP,EAF0B;IAGpCC,YAAY,EAAEV,MAAM,CAACW,mBAAP;EAHsB,CAAH,GAI/B,EAJJ;EAKA,OAAO;IACLC,gBAAgB,EAAEC,mBADb;IAELC,eAAe,EAAED;EAFZ,CAAP;;EAKA,SAASA,mBAAT,CAA6BE,IAA7B,EAAmC;IACjC,IAAIA,IAAI,CAACC,cAAT,EAAyB;MACvB,KAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,KAAK,GAAGH,IAAI,CAACC,cAAL,IAAuB,EAAjD,EAAqDC,GAAG,GAAGC,KAAK,CAACC,MAAjE,EAAyEF,GAAG,EAA5E,EAAgF;QAC9E,IAAIG,aAAa,GAAGF,KAAK,CAACD,GAAD,CAAzB;QACA,IAAItB,SAAS,GAAGyB,aAAa,CAACzB,SAA9B;QACA,IAAI0B,2BAA2B,GAAGnB,qBAAqB,CAACP,SAAD,CAAvD;;QAEA,IAAIU,sBAAsB,CAACV,SAAD,CAA1B,EAAuC;UACrCI,OAAO,CAACuB,WAAR,CAAoB,IAAI7B,YAAJ,CAAiBI,2BAA2B,CAACF,SAAD,CAA5C,EAAyDyB,aAAzD,CAApB;QACD,CAFD,MAEO,IAAIC,2BAAJ,EAAiC;UACtCtB,OAAO,CAACuB,WAAR,CAAoB,IAAI7B,YAAJ,CAAiBC,6BAA6B,CAACC,SAAD,CAA9C,EAA2D,CAAC0B,2BAAD,EAA8BD,aAA9B,CAA3D,CAApB;QACD,CAFM,MAEA;UACLlB,qBAAqB,CAACP,SAAD,CAArB,GAAmCyB,aAAnC;QACD;MACF;IACF;;IAED,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}