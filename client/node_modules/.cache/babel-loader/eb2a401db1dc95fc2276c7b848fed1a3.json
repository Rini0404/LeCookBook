{"ast":null,"code":"import find from '../polyfills/find';\nimport flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport objectEntries from '../polyfills/objectEntries';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isValidNameError } from '../utilities/assertValidName';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators';\nimport { isDirective } from './directives';\nimport { isIntrospectionType } from './introspection';\nimport { assertSchema } from './schema';\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument } from './definition';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext = /*#__PURE__*/function () {\n  function SchemaValidationContext(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n\n  for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {\n    var node = operationNodes[_i2];\n\n    if (node.operation === operation) {\n      return node.type;\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {\n    var directive = _context$schema$getDi2[_i4]; // Ensure all directives are in fact GraphQL directives.\n\n    if (!isDirective(directive)) {\n      context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive && directive.astNode);\n      continue;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    var argNames = Object.create(null);\n\n    var _loop = function _loop(_i6, _directive$args2) {\n      var arg = _directive$args2[_i6];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per directive.\n\n      if (argNames[argName]) {\n        context.reportError(\"Argument @\".concat(directive.name, \"(\").concat(argName, \":) can only be defined once.\"), directive.astNode && directive.args.filter(function (_ref) {\n          var name = _ref.name;\n          return name === argName;\n        }).map(function (_ref2) {\n          var astNode = _ref2.astNode;\n          return astNode;\n        }));\n        return \"continue\";\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(argName, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n      }\n    };\n\n    for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n      var _ret = _loop(_i6, _directive$args2);\n\n      if (_ret === \"continue\") continue;\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  } // Ensure names are valid, however introspection types opt out.\n\n\n  var error = isValidNameError(node.name, node.astNode || undefined);\n\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n\n  for (var _i8 = 0, _objectValues2 = objectValues(typeMap); _i8 < _objectValues2.length; _i8++) {\n    var type = _objectValues2[_i8]; // Ensure all provided types are in fact GraphQL type.\n\n    if (!isNamedType(type)) {\n      context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type && type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateObjectInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  for (var _i10 = 0; _i10 < fields.length; _i10++) {\n    var field = fields[_i10]; // Ensure they are named correctly.\n\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n    } // Ensure the arguments are valid\n\n\n    var argNames = Object.create(null);\n\n    var _loop2 = function _loop2(_i12, _field$args2) {\n      var arg = _field$args2[_i12];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per field.\n\n      if (argNames[argName]) {\n        context.reportError(\"Field argument \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) can only be defined once.\"), field.args.filter(function (_ref3) {\n          var name = _ref3.name;\n          return name === argName;\n        }).map(function (_ref4) {\n          var astNode = _ref4.astNode;\n          return astNode;\n        }));\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), arg.astNode && arg.astNode.type);\n      }\n    };\n\n    for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {\n      _loop2(_i12, _field$args2);\n    }\n  }\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n\n  for (var _i14 = 0, _object$getInterfaces2 = object.getInterfaces(); _i14 < _object$getInterfaces2.length; _i14++) {\n    var iface = _object$getInterfaces2[_i14];\n\n    if (!isInterfaceType(iface)) {\n      context.reportError(\"Type \".concat(inspect(object), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(object, iface));\n      continue;\n    }\n\n    if (implementedTypeNames[iface.name]) {\n      context.reportError(\"Type \".concat(object.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(object, iface));\n      continue;\n    }\n\n    implementedTypeNames[iface.name] = true;\n    validateObjectImplementsInterface(context, object, iface);\n  }\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields(); // Assert each interface field is implemented.\n\n  for (var _i16 = 0, _objectEntries2 = objectEntries(ifaceFieldMap); _i16 < _objectEntries2.length; _i16++) {\n    var _ref6 = _objectEntries2[_i16];\n    var fieldName = _ref6[0];\n    var ifaceField = _ref6[1];\n    var objectField = objectFieldMap[fieldName]; // Assert interface field exists on object.\n\n    if (!objectField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(object.name, \" does not provide it.\"), [ifaceField.astNode].concat(getAllNodes(object)));\n      continue;\n    } // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(object.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(objectField.type), \".\"), [ifaceField.astNode && ifaceField.astNode.type, objectField.astNode && objectField.astNode.type]);\n    } // Assert each interface field arg is implemented.\n\n\n    var _loop3 = function _loop3(_i18, _ifaceField$args2) {\n      var ifaceArg = _ifaceField$args2[_i18];\n      var argName = ifaceArg.name;\n      var objectArg = find(objectField.args, function (arg) {\n        return arg.name === argName;\n      }); // Assert interface field arg exists on object field.\n\n      if (!objectArg) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(object.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, objectField.astNode]);\n        return \"continue\";\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, objectArg.type)) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(object.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(objectArg.type), \".\"), [ifaceArg.astNode && ifaceArg.astNode.type, objectArg.astNode && objectArg.astNode.type]);\n      } // TODO: validate default values?\n\n    };\n\n    for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {\n      var _ret2 = _loop3(_i18, _ifaceField$args2);\n\n      if (_ret2 === \"continue\") continue;\n    } // Assert additional arguments must not be required.\n\n\n    var _loop4 = function _loop4(_i20, _objectField$args2) {\n      var objectArg = _objectField$args2[_i20];\n      var argName = objectArg.name;\n      var ifaceArg = find(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      if (!ifaceArg && isRequiredArgument(objectArg)) {\n        context.reportError(\"Object field \".concat(object.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [objectArg.astNode, ifaceField.astNode]);\n      }\n    };\n\n    for (var _i20 = 0, _objectField$args2 = objectField.args; _i20 < _objectField$args2.length; _i20++) {\n      _loop4(_i20, _objectField$args2);\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n\n  for (var _i22 = 0; _i22 < memberTypes.length; _i22++) {\n    var memberType = memberTypes[_i22];\n\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  for (var _i24 = 0; _i24 < enumValues.length; _i24++) {\n    var enumValue = enumValues[_i24];\n    var valueName = enumValue.name; // Ensure valid name.\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  for (var _i26 = 0; _i26 < fields.length; _i26++) {\n    var field = fields[_i26]; // Ensure they are named correctly.\n\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = objectValues(inputObj.getFields());\n\n    for (var _i28 = 0; _i28 < fields.length; _i28++) {\n      var field = fields[_i28];\n\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        var fieldType = field.type.ofType;\n        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          var cyclePath = fieldPath.slice(cycleIndex);\n          var pathStr = cyclePath.map(function (fieldObj) {\n            return fieldObj.name;\n          }).join('.');\n          context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n            return fieldObj.astNode;\n          }));\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes || [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  return flatMap(getAllNodes(object), function (item) {\n    return getter(item) || [];\n  });\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}","map":{"version":3,"names":["find","flatMap","objectValues","objectEntries","inspect","GraphQLError","isValidNameError","isEqualType","isTypeSubTypeOf","isDirective","isIntrospectionType","assertSchema","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isNamedType","isNonNullType","isInputType","isOutputType","isRequiredArgument","validateSchema","schema","__validationErrors","context","SchemaValidationContext","validateRootTypes","validateDirectives","validateTypes","errors","getErrors","assertValidSchema","length","Error","map","error","message","join","_errors","_proto","prototype","reportError","nodes","_nodes","Array","isArray","filter","Boolean","addError","push","queryType","getQueryType","astNode","concat","getOperationTypeNode","mutationType","getMutationType","subscriptionType","getSubscriptionType","type","operation","operationNodes","getAllSubNodes","node","operationTypes","_i2","_i4","_context$schema$getDi2","getDirectives","directive","validateName","argNames","Object","create","_loop","_i6","_directive$args2","arg","argName","name","args","_ref","_ref2","_ret","__allowedLegacyNames","indexOf","undefined","validateInputObjectCircularRefs","createInputObjectCircularRefsValidator","typeMap","getTypeMap","_i8","_objectValues2","validateFields","validateObjectInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","fields","getFields","getAllNodes","_i10","field","_loop2","_i12","_field$args2","_ref3","_ref4","object","implementedTypeNames","_i14","_object$getInterfaces2","getInterfaces","iface","getAllImplementsInterfaceNodes","validateObjectImplementsInterface","objectFieldMap","ifaceFieldMap","_i16","_objectEntries2","_ref6","fieldName","ifaceField","objectField","_loop3","_i18","_ifaceField$args2","ifaceArg","objectArg","_ret2","_loop4","_i20","_objectField$args2","union","memberTypes","getTypes","includedTypeNames","_i22","memberType","getUnionMemberTypeNodes","String","enumType","enumValues","getValues","_i24","enumValue","valueName","inputObj","_i26","visitedTypes","fieldPath","fieldPathIndexByTypeName","detectCycleRecursive","_i28","ofType","fieldType","cycleIndex","cyclePath","slice","pathStr","fieldObj","pop","extensionASTNodes","getter","item","typeNode","interfaces","ifaceNode","value","typeName","unionNode","types"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/type/validate.mjs"],"sourcesContent":["import find from '../polyfills/find';\nimport flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport objectEntries from '../polyfills/objectEntries';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isValidNameError } from '../utilities/assertValidName';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators';\nimport { isDirective } from './directives';\nimport { isIntrospectionType } from './introspection';\nimport { assertSchema } from './schema';\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument } from './definition';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext =\n/*#__PURE__*/\nfunction () {\n  function SchemaValidationContext(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n\n  for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {\n    var node = operationNodes[_i2];\n\n    if (node.operation === operation) {\n      return node.type;\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {\n    var directive = _context$schema$getDi2[_i4];\n\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive && directive.astNode);\n      continue;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    var argNames = Object.create(null);\n\n    var _loop = function _loop(_i6, _directive$args2) {\n      var arg = _directive$args2[_i6];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per directive.\n\n      if (argNames[argName]) {\n        context.reportError(\"Argument @\".concat(directive.name, \"(\").concat(argName, \":) can only be defined once.\"), directive.astNode && directive.args.filter(function (_ref) {\n          var name = _ref.name;\n          return name === argName;\n        }).map(function (_ref2) {\n          var astNode = _ref2.astNode;\n          return astNode;\n        }));\n        return \"continue\";\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(argName, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n      }\n    };\n\n    for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n      var _ret = _loop(_i6, _directive$args2);\n\n      if (_ret === \"continue\") continue;\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  } // Ensure names are valid, however introspection types opt out.\n\n\n  var error = isValidNameError(node.name, node.astNode || undefined);\n\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n\n  for (var _i8 = 0, _objectValues2 = objectValues(typeMap); _i8 < _objectValues2.length; _i8++) {\n    var type = _objectValues2[_i8];\n\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type && type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateObjectInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  for (var _i10 = 0; _i10 < fields.length; _i10++) {\n    var field = fields[_i10];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n    } // Ensure the arguments are valid\n\n\n    var argNames = Object.create(null);\n\n    var _loop2 = function _loop2(_i12, _field$args2) {\n      var arg = _field$args2[_i12];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per field.\n\n      if (argNames[argName]) {\n        context.reportError(\"Field argument \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) can only be defined once.\"), field.args.filter(function (_ref3) {\n          var name = _ref3.name;\n          return name === argName;\n        }).map(function (_ref4) {\n          var astNode = _ref4.astNode;\n          return astNode;\n        }));\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), arg.astNode && arg.astNode.type);\n      }\n    };\n\n    for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {\n      _loop2(_i12, _field$args2);\n    }\n  }\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n\n  for (var _i14 = 0, _object$getInterfaces2 = object.getInterfaces(); _i14 < _object$getInterfaces2.length; _i14++) {\n    var iface = _object$getInterfaces2[_i14];\n\n    if (!isInterfaceType(iface)) {\n      context.reportError(\"Type \".concat(inspect(object), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(object, iface));\n      continue;\n    }\n\n    if (implementedTypeNames[iface.name]) {\n      context.reportError(\"Type \".concat(object.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(object, iface));\n      continue;\n    }\n\n    implementedTypeNames[iface.name] = true;\n    validateObjectImplementsInterface(context, object, iface);\n  }\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields(); // Assert each interface field is implemented.\n\n  for (var _i16 = 0, _objectEntries2 = objectEntries(ifaceFieldMap); _i16 < _objectEntries2.length; _i16++) {\n    var _ref6 = _objectEntries2[_i16];\n    var fieldName = _ref6[0];\n    var ifaceField = _ref6[1];\n    var objectField = objectFieldMap[fieldName]; // Assert interface field exists on object.\n\n    if (!objectField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(object.name, \" does not provide it.\"), [ifaceField.astNode].concat(getAllNodes(object)));\n      continue;\n    } // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(object.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(objectField.type), \".\"), [ifaceField.astNode && ifaceField.astNode.type, objectField.astNode && objectField.astNode.type]);\n    } // Assert each interface field arg is implemented.\n\n\n    var _loop3 = function _loop3(_i18, _ifaceField$args2) {\n      var ifaceArg = _ifaceField$args2[_i18];\n      var argName = ifaceArg.name;\n      var objectArg = find(objectField.args, function (arg) {\n        return arg.name === argName;\n      }); // Assert interface field arg exists on object field.\n\n      if (!objectArg) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(object.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, objectField.astNode]);\n        return \"continue\";\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, objectArg.type)) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(object.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(objectArg.type), \".\"), [ifaceArg.astNode && ifaceArg.astNode.type, objectArg.astNode && objectArg.astNode.type]);\n      } // TODO: validate default values?\n\n    };\n\n    for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {\n      var _ret2 = _loop3(_i18, _ifaceField$args2);\n\n      if (_ret2 === \"continue\") continue;\n    } // Assert additional arguments must not be required.\n\n\n    var _loop4 = function _loop4(_i20, _objectField$args2) {\n      var objectArg = _objectField$args2[_i20];\n      var argName = objectArg.name;\n      var ifaceArg = find(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      if (!ifaceArg && isRequiredArgument(objectArg)) {\n        context.reportError(\"Object field \".concat(object.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [objectArg.astNode, ifaceField.astNode]);\n      }\n    };\n\n    for (var _i20 = 0, _objectField$args2 = objectField.args; _i20 < _objectField$args2.length; _i20++) {\n      _loop4(_i20, _objectField$args2);\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n\n  for (var _i22 = 0; _i22 < memberTypes.length; _i22++) {\n    var memberType = memberTypes[_i22];\n\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  for (var _i24 = 0; _i24 < enumValues.length; _i24++) {\n    var enumValue = enumValues[_i24];\n    var valueName = enumValue.name; // Ensure valid name.\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  for (var _i26 = 0; _i26 < fields.length; _i26++) {\n    var field = fields[_i26];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = objectValues(inputObj.getFields());\n\n    for (var _i28 = 0; _i28 < fields.length; _i28++) {\n      var field = fields[_i28];\n\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        var fieldType = field.type.ofType;\n        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          var cyclePath = fieldPath.slice(cycleIndex);\n          var pathStr = cyclePath.map(function (fieldObj) {\n            return fieldObj.name;\n          }).join('.');\n          context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n            return fieldObj.astNode;\n          }));\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes || [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  return flatMap(getAllNodes(object), function (item) {\n    return getter(item) || [];\n  });\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,8BAA7C;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,WAAxC,EAAqDC,UAArD,EAAiEC,iBAAjE,EAAoFC,WAApF,EAAiGC,aAAjG,EAAgHC,WAAhH,EAA6HC,YAA7H,EAA2IC,kBAA3I,QAAqK,cAArK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;EACrC;EACAZ,YAAY,CAACY,MAAD,CAAZ,CAFqC,CAEf;;EAEtB,IAAIA,MAAM,CAACC,kBAAX,EAA+B;IAC7B,OAAOD,MAAM,CAACC,kBAAd;EACD,CANoC,CAMnC;;;EAGF,IAAIC,OAAO,GAAG,IAAIC,uBAAJ,CAA4BH,MAA5B,CAAd;EACAI,iBAAiB,CAACF,OAAD,CAAjB;EACAG,kBAAkB,CAACH,OAAD,CAAlB;EACAI,aAAa,CAACJ,OAAD,CAAb,CAZqC,CAYb;EACxB;;EAEA,IAAIK,MAAM,GAAGL,OAAO,CAACM,SAAR,EAAb;EACAR,MAAM,CAACC,kBAAP,GAA4BM,MAA5B;EACA,OAAOA,MAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASE,iBAAT,CAA2BT,MAA3B,EAAmC;EACxC,IAAIO,MAAM,GAAGR,cAAc,CAACC,MAAD,CAA3B;;EAEA,IAAIO,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;IACvB,MAAM,IAAIC,KAAJ,CAAUJ,MAAM,CAACK,GAAP,CAAW,UAAUC,KAAV,EAAiB;MAC1C,OAAOA,KAAK,CAACC,OAAb;IACD,CAFe,EAEbC,IAFa,CAER,MAFQ,CAAV,CAAN;EAGD;AACF;;AAED,IAAIZ,uBAAuB,GAC3B,aACA,YAAY;EACV,SAASA,uBAAT,CAAiCH,MAAjC,EAAyC;IACvC,KAAKgB,OAAL,GAAe,EAAf;IACA,KAAKhB,MAAL,GAAcA,MAAd;EACD;;EAED,IAAIiB,MAAM,GAAGd,uBAAuB,CAACe,SAArC;;EAEAD,MAAM,CAACE,WAAP,GAAqB,SAASA,WAAT,CAAqBL,OAArB,EAA8BM,KAA9B,EAAqC;IACxD,IAAIC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAK,CAACI,MAAN,CAAaC,OAAb,CAAvB,GAA+CL,KAA5D;;IAEA,KAAKM,QAAL,CAAc,IAAI5C,YAAJ,CAAiBgC,OAAjB,EAA0BO,MAA1B,CAAd;EACD,CAJD;;EAMAJ,MAAM,CAACS,QAAP,GAAkB,SAASA,QAAT,CAAkBb,KAAlB,EAAyB;IACzC,KAAKG,OAAL,CAAaW,IAAb,CAAkBd,KAAlB;EACD,CAFD;;EAIAI,MAAM,CAACT,SAAP,GAAmB,SAASA,SAAT,GAAqB;IACtC,OAAO,KAAKQ,OAAZ;EACD,CAFD;;EAIA,OAAOb,uBAAP;AACD,CAvBD,EAFA;;AA2BA,SAASC,iBAAT,CAA2BF,OAA3B,EAAoC;EAClC,IAAIF,MAAM,GAAGE,OAAO,CAACF,MAArB;EACA,IAAI4B,SAAS,GAAG5B,MAAM,CAAC6B,YAAP,EAAhB;;EAEA,IAAI,CAACD,SAAL,EAAgB;IACd1B,OAAO,CAACiB,WAAR,CAAoB,mCAApB,EAAyDnB,MAAM,CAAC8B,OAAhE;EACD,CAFD,MAEO,IAAI,CAACzC,YAAY,CAACuC,SAAD,CAAjB,EAA8B;IACnC1B,OAAO,CAACiB,WAAR,CAAoB,qDAAqDY,MAArD,CAA4DlD,OAAO,CAAC+C,SAAD,CAAnE,EAAgF,GAAhF,CAApB,EAA0GI,oBAAoB,CAAChC,MAAD,EAAS4B,SAAT,EAAoB,OAApB,CAA9H;EACD;;EAED,IAAIK,YAAY,GAAGjC,MAAM,CAACkC,eAAP,EAAnB;;EAEA,IAAID,YAAY,IAAI,CAAC5C,YAAY,CAAC4C,YAAD,CAAjC,EAAiD;IAC/C/B,OAAO,CAACiB,WAAR,CAAoB,sEAAsE,GAAGY,MAAH,CAAUlD,OAAO,CAACoD,YAAD,CAAjB,EAAiC,GAAjC,CAA1F,EAAiID,oBAAoB,CAAChC,MAAD,EAASiC,YAAT,EAAuB,UAAvB,CAArJ;EACD;;EAED,IAAIE,gBAAgB,GAAGnC,MAAM,CAACoC,mBAAP,EAAvB;;EAEA,IAAID,gBAAgB,IAAI,CAAC9C,YAAY,CAAC8C,gBAAD,CAArC,EAAyD;IACvDjC,OAAO,CAACiB,WAAR,CAAoB,0EAA0E,GAAGY,MAAH,CAAUlD,OAAO,CAACsD,gBAAD,CAAjB,EAAqC,GAArC,CAA9F,EAAyIH,oBAAoB,CAAChC,MAAD,EAASmC,gBAAT,EAA2B,cAA3B,CAA7J;EACD;AACF;;AAED,SAASH,oBAAT,CAA8BhC,MAA9B,EAAsCqC,IAAtC,EAA4CC,SAA5C,EAAuD;EACrD,IAAIC,cAAc,GAAGC,cAAc,CAACxC,MAAD,EAAS,UAAUyC,IAAV,EAAgB;IAC1D,OAAOA,IAAI,CAACC,cAAZ;EACD,CAFkC,CAAnC;;EAIA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,cAAc,CAAC7B,MAAvC,EAA+CiC,GAAG,EAAlD,EAAsD;IACpD,IAAIF,IAAI,GAAGF,cAAc,CAACI,GAAD,CAAzB;;IAEA,IAAIF,IAAI,CAACH,SAAL,KAAmBA,SAAvB,EAAkC;MAChC,OAAOG,IAAI,CAACJ,IAAZ;IACD;EACF;;EAED,OAAOA,IAAI,CAACP,OAAZ;AACD;;AAED,SAASzB,kBAAT,CAA4BH,OAA5B,EAAqC;EACnC,KAAK,IAAI0C,GAAG,GAAG,CAAV,EAAaC,sBAAsB,GAAG3C,OAAO,CAACF,MAAR,CAAe8C,aAAf,EAA3C,EAA2EF,GAAG,GAAGC,sBAAsB,CAACnC,MAAxG,EAAgHkC,GAAG,EAAnH,EAAuH;IACrH,IAAIG,SAAS,GAAGF,sBAAsB,CAACD,GAAD,CAAtC,CADqH,CAGrH;;IACA,IAAI,CAAC1D,WAAW,CAAC6D,SAAD,CAAhB,EAA6B;MAC3B7C,OAAO,CAACiB,WAAR,CAAoB,+BAA+BY,MAA/B,CAAsClD,OAAO,CAACkE,SAAD,CAA7C,EAA0D,GAA1D,CAApB,EAAoFA,SAAS,IAAIA,SAAS,CAACjB,OAA3G;MACA;IACD,CAPoH,CAOnH;;;IAGFkB,YAAY,CAAC9C,OAAD,EAAU6C,SAAV,CAAZ,CAVqH,CAUnF;IAClC;;IAEA,IAAIE,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf;;IAEA,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,GAAf,EAAoBC,gBAApB,EAAsC;MAChD,IAAIC,GAAG,GAAGD,gBAAgB,CAACD,GAAD,CAA1B;MACA,IAAIG,OAAO,GAAGD,GAAG,CAACE,IAAlB,CAFgD,CAExB;;MAExBT,YAAY,CAAC9C,OAAD,EAAUqD,GAAV,CAAZ,CAJgD,CAIpB;;MAE5B,IAAIN,QAAQ,CAACO,OAAD,CAAZ,EAAuB;QACrBtD,OAAO,CAACiB,WAAR,CAAoB,aAAaY,MAAb,CAAoBgB,SAAS,CAACU,IAA9B,EAAoC,GAApC,EAAyC1B,MAAzC,CAAgDyB,OAAhD,EAAyD,8BAAzD,CAApB,EAA8GT,SAAS,CAACjB,OAAV,IAAqBiB,SAAS,CAACW,IAAV,CAAelC,MAAf,CAAsB,UAAUmC,IAAV,EAAgB;UACvK,IAAIF,IAAI,GAAGE,IAAI,CAACF,IAAhB;UACA,OAAOA,IAAI,KAAKD,OAAhB;QACD,CAHkI,EAGhI5C,GAHgI,CAG5H,UAAUgD,KAAV,EAAiB;UACtB,IAAI9B,OAAO,GAAG8B,KAAK,CAAC9B,OAApB;UACA,OAAOA,OAAP;QACD,CANkI,CAAnI;QAOA,OAAO,UAAP;MACD;;MAEDmB,QAAQ,CAACO,OAAD,CAAR,GAAoB,IAApB,CAjBgD,CAiBtB;;MAE1B,IAAI,CAAC5D,WAAW,CAAC2D,GAAG,CAAClB,IAAL,CAAhB,EAA4B;QAC1BnC,OAAO,CAACiB,WAAR,CAAoB,gBAAgBY,MAAhB,CAAuBgB,SAAS,CAACU,IAAjC,EAAuC,GAAvC,EAA4C1B,MAA5C,CAAmDyB,OAAnD,EAA4D,wBAA5D,IAAwF,YAAYzB,MAAZ,CAAmBlD,OAAO,CAAC0E,GAAG,CAAClB,IAAL,CAA1B,EAAsC,GAAtC,CAA5G,EAAwJkB,GAAG,CAACzB,OAA5J;MACD;IACF,CAtBD;;IAwBA,KAAK,IAAIuB,GAAG,GAAG,CAAV,EAAaC,gBAAgB,GAAGP,SAAS,CAACW,IAA/C,EAAqDL,GAAG,GAAGC,gBAAgB,CAAC5C,MAA5E,EAAoF2C,GAAG,EAAvF,EAA2F;MACzF,IAAIQ,IAAI,GAAGT,KAAK,CAACC,GAAD,EAAMC,gBAAN,CAAhB;;MAEA,IAAIO,IAAI,KAAK,UAAb,EAAyB;IAC1B;EACF;AACF;;AAED,SAASb,YAAT,CAAsB9C,OAAtB,EAA+BuC,IAA/B,EAAqC;EACnC;EACA;EACA,IAAIvC,OAAO,CAACF,MAAR,CAAe8D,oBAAf,CAAoCC,OAApC,CAA4CtB,IAAI,CAACgB,IAAjD,MAA2D,CAAC,CAAhE,EAAmE;IACjE;EACD,CALkC,CAKjC;;;EAGF,IAAI5C,KAAK,GAAG9B,gBAAgB,CAAC0D,IAAI,CAACgB,IAAN,EAAYhB,IAAI,CAACX,OAAL,IAAgBkC,SAA5B,CAA5B;;EAEA,IAAInD,KAAJ,EAAW;IACTX,OAAO,CAACwB,QAAR,CAAiBb,KAAjB;EACD;AACF;;AAED,SAASP,aAAT,CAAuBJ,OAAvB,EAAgC;EAC9B,IAAI+D,+BAA+B,GAAGC,sCAAsC,CAAChE,OAAD,CAA5E;EACA,IAAIiE,OAAO,GAAGjE,OAAO,CAACF,MAAR,CAAeoE,UAAf,EAAd;;EAEA,KAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,cAAc,GAAG3F,YAAY,CAACwF,OAAD,CAA/C,EAA0DE,GAAG,GAAGC,cAAc,CAAC5D,MAA/E,EAAuF2D,GAAG,EAA1F,EAA8F;IAC5F,IAAIhC,IAAI,GAAGiC,cAAc,CAACD,GAAD,CAAzB,CAD4F,CAG5F;;IACA,IAAI,CAAC3E,WAAW,CAAC2C,IAAD,CAAhB,EAAwB;MACtBnC,OAAO,CAACiB,WAAR,CAAoB,wCAAwCY,MAAxC,CAA+ClD,OAAO,CAACwD,IAAD,CAAtD,EAA8D,GAA9D,CAApB,EAAwFA,IAAI,IAAIA,IAAI,CAACP,OAArG;MACA;IACD,CAP2F,CAO1F;;;IAGF,IAAI,CAAC3C,mBAAmB,CAACkD,IAAD,CAAxB,EAAgC;MAC9BW,YAAY,CAAC9C,OAAD,EAAUmC,IAAV,CAAZ;IACD;;IAED,IAAIhD,YAAY,CAACgD,IAAD,CAAhB,EAAwB;MACtB;MACAkC,cAAc,CAACrE,OAAD,EAAUmC,IAAV,CAAd,CAFsB,CAES;;MAE/BmC,wBAAwB,CAACtE,OAAD,EAAUmC,IAAV,CAAxB;IACD,CALD,MAKO,IAAI/C,eAAe,CAAC+C,IAAD,CAAnB,EAA2B;MAChC;MACAkC,cAAc,CAACrE,OAAD,EAAUmC,IAAV,CAAd;IACD,CAHM,MAGA,IAAI9C,WAAW,CAAC8C,IAAD,CAAf,EAAuB;MAC5B;MACAoC,oBAAoB,CAACvE,OAAD,EAAUmC,IAAV,CAApB;IACD,CAHM,MAGA,IAAI7C,UAAU,CAAC6C,IAAD,CAAd,EAAsB;MAC3B;MACAqC,kBAAkB,CAACxE,OAAD,EAAUmC,IAAV,CAAlB;IACD,CAHM,MAGA,IAAI5C,iBAAiB,CAAC4C,IAAD,CAArB,EAA6B;MAClC;MACAsC,mBAAmB,CAACzE,OAAD,EAAUmC,IAAV,CAAnB,CAFkC,CAEE;;MAEpC4B,+BAA+B,CAAC5B,IAAD,CAA/B;IACD;EACF;AACF;;AAED,SAASkC,cAAT,CAAwBrE,OAAxB,EAAiCmC,IAAjC,EAAuC;EACrC,IAAIuC,MAAM,GAAGjG,YAAY,CAAC0D,IAAI,CAACwC,SAAL,EAAD,CAAzB,CADqC,CACQ;;EAE7C,IAAID,MAAM,CAAClE,MAAP,KAAkB,CAAtB,EAAyB;IACvBR,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAeM,IAAI,CAACoB,IAApB,EAA0B,kCAA1B,CAApB,EAAmFqB,WAAW,CAACzC,IAAD,CAA9F;EACD;;EAED,KAAK,IAAI0C,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGH,MAAM,CAAClE,MAAjC,EAAyCqE,IAAI,EAA7C,EAAiD;IAC/C,IAAIC,KAAK,GAAGJ,MAAM,CAACG,IAAD,CAAlB,CAD+C,CAE/C;;IACA/B,YAAY,CAAC9C,OAAD,EAAU8E,KAAV,CAAZ,CAH+C,CAGjB;;IAE9B,IAAI,CAACnF,YAAY,CAACmF,KAAK,CAAC3C,IAAP,CAAjB,EAA+B;MAC7BnC,OAAO,CAACiB,WAAR,CAAoB,eAAeY,MAAf,CAAsBM,IAAI,CAACoB,IAA3B,EAAiC,GAAjC,EAAsC1B,MAAtC,CAA6CiD,KAAK,CAACvB,IAAnD,EAAyD,uBAAzD,IAAoF,YAAY1B,MAAZ,CAAmBlD,OAAO,CAACmG,KAAK,CAAC3C,IAAP,CAA1B,EAAwC,GAAxC,CAAxG,EAAsJ2C,KAAK,CAAClD,OAAN,IAAiBkD,KAAK,CAAClD,OAAN,CAAcO,IAArL;IACD,CAP8C,CAO7C;;;IAGF,IAAIY,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf;;IAEA,IAAI8B,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,YAAtB,EAAoC;MAC/C,IAAI5B,GAAG,GAAG4B,YAAY,CAACD,IAAD,CAAtB;MACA,IAAI1B,OAAO,GAAGD,GAAG,CAACE,IAAlB,CAF+C,CAEvB;;MAExBT,YAAY,CAAC9C,OAAD,EAAUqD,GAAV,CAAZ,CAJ+C,CAInB;;MAE5B,IAAIN,QAAQ,CAACO,OAAD,CAAZ,EAAuB;QACrBtD,OAAO,CAACiB,WAAR,CAAoB,kBAAkBY,MAAlB,CAAyBM,IAAI,CAACoB,IAA9B,EAAoC,GAApC,EAAyC1B,MAAzC,CAAgDiD,KAAK,CAACvB,IAAtD,EAA4D,GAA5D,EAAiE1B,MAAjE,CAAwEyB,OAAxE,EAAiF,8BAAjF,CAApB,EAAsIwB,KAAK,CAACtB,IAAN,CAAWlC,MAAX,CAAkB,UAAU4D,KAAV,EAAiB;UACvK,IAAI3B,IAAI,GAAG2B,KAAK,CAAC3B,IAAjB;UACA,OAAOA,IAAI,KAAKD,OAAhB;QACD,CAHqI,EAGnI5C,GAHmI,CAG/H,UAAUyE,KAAV,EAAiB;UACtB,IAAIvD,OAAO,GAAGuD,KAAK,CAACvD,OAApB;UACA,OAAOA,OAAP;QACD,CANqI,CAAtI;MAOD;;MAEDmB,QAAQ,CAACO,OAAD,CAAR,GAAoB,IAApB,CAhB+C,CAgBrB;;MAE1B,IAAI,CAAC5D,WAAW,CAAC2D,GAAG,CAAClB,IAAL,CAAhB,EAA4B;QAC1BnC,OAAO,CAACiB,WAAR,CAAoB,eAAeY,MAAf,CAAsBM,IAAI,CAACoB,IAA3B,EAAiC,GAAjC,EAAsC1B,MAAtC,CAA6CiD,KAAK,CAACvB,IAAnD,EAAyD,GAAzD,EAA8D1B,MAA9D,CAAqEyB,OAArE,EAA8E,mBAA9E,IAAqG,iBAAiBzB,MAAjB,CAAwBlD,OAAO,CAAC0E,GAAG,CAAClB,IAAL,CAA/B,EAA2C,GAA3C,CAAzH,EAA0KkB,GAAG,CAACzB,OAAJ,IAAeyB,GAAG,CAACzB,OAAJ,CAAYO,IAArM;MACD;IACF,CArBD;;IAuBA,KAAK,IAAI6C,IAAI,GAAG,CAAX,EAAcC,YAAY,GAAGH,KAAK,CAACtB,IAAxC,EAA8CwB,IAAI,GAAGC,YAAY,CAACzE,MAAlE,EAA0EwE,IAAI,EAA9E,EAAkF;MAChFD,MAAM,CAACC,IAAD,EAAOC,YAAP,CAAN;IACD;EACF;AACF;;AAED,SAASX,wBAAT,CAAkCtE,OAAlC,EAA2CoF,MAA3C,EAAmD;EACjD,IAAIC,oBAAoB,GAAGrC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA3B;;EAEA,KAAK,IAAIqC,IAAI,GAAG,CAAX,EAAcC,sBAAsB,GAAGH,MAAM,CAACI,aAAP,EAA5C,EAAoEF,IAAI,GAAGC,sBAAsB,CAAC/E,MAAlG,EAA0G8E,IAAI,EAA9G,EAAkH;IAChH,IAAIG,KAAK,GAAGF,sBAAsB,CAACD,IAAD,CAAlC;;IAEA,IAAI,CAAClG,eAAe,CAACqG,KAAD,CAApB,EAA6B;MAC3BzF,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAelD,OAAO,CAACyG,MAAD,CAAtB,EAAgC,wCAAhC,IAA4E,uBAAuBvD,MAAvB,CAA8BlD,OAAO,CAAC8G,KAAD,CAArC,EAA8C,GAA9C,CAAhG,EAAoJC,8BAA8B,CAACN,MAAD,EAASK,KAAT,CAAlL;MACA;IACD;;IAED,IAAIJ,oBAAoB,CAACI,KAAK,CAAClC,IAAP,CAAxB,EAAsC;MACpCvD,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAeuD,MAAM,CAAC7B,IAAtB,EAA4B,sBAA5B,EAAoD1B,MAApD,CAA2D4D,KAAK,CAAClC,IAAjE,EAAuE,QAAvE,CAApB,EAAsGmC,8BAA8B,CAACN,MAAD,EAASK,KAAT,CAApI;MACA;IACD;;IAEDJ,oBAAoB,CAACI,KAAK,CAAClC,IAAP,CAApB,GAAmC,IAAnC;IACAoC,iCAAiC,CAAC3F,OAAD,EAAUoF,MAAV,EAAkBK,KAAlB,CAAjC;EACD;AACF;;AAED,SAASE,iCAAT,CAA2C3F,OAA3C,EAAoDoF,MAApD,EAA4DK,KAA5D,EAAmE;EACjE,IAAIG,cAAc,GAAGR,MAAM,CAACT,SAAP,EAArB;EACA,IAAIkB,aAAa,GAAGJ,KAAK,CAACd,SAAN,EAApB,CAFiE,CAE1B;;EAEvC,KAAK,IAAImB,IAAI,GAAG,CAAX,EAAcC,eAAe,GAAGrH,aAAa,CAACmH,aAAD,CAAlD,EAAmEC,IAAI,GAAGC,eAAe,CAACvF,MAA1F,EAAkGsF,IAAI,EAAtG,EAA0G;IACxG,IAAIE,KAAK,GAAGD,eAAe,CAACD,IAAD,CAA3B;IACA,IAAIG,SAAS,GAAGD,KAAK,CAAC,CAAD,CAArB;IACA,IAAIE,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAtB;IACA,IAAIG,WAAW,GAAGP,cAAc,CAACK,SAAD,CAAhC,CAJwG,CAI3D;;IAE7C,IAAI,CAACE,WAAL,EAAkB;MAChBnG,OAAO,CAACiB,WAAR,CAAoB,mBAAmBY,MAAnB,CAA0B4D,KAAK,CAAClC,IAAhC,EAAsC,GAAtC,EAA2C1B,MAA3C,CAAkDoE,SAAlD,EAA6D,gBAA7D,EAA+EpE,MAA/E,CAAsFuD,MAAM,CAAC7B,IAA7F,EAAmG,uBAAnG,CAApB,EAAiJ,CAAC2C,UAAU,CAACtE,OAAZ,EAAqBC,MAArB,CAA4B+C,WAAW,CAACQ,MAAD,CAAvC,CAAjJ;MACA;IACD,CATuG,CAStG;IACF;;;IAGA,IAAI,CAACrG,eAAe,CAACiB,OAAO,CAACF,MAAT,EAAiBqG,WAAW,CAAChE,IAA7B,EAAmC+D,UAAU,CAAC/D,IAA9C,CAApB,EAAyE;MACvEnC,OAAO,CAACiB,WAAR,CAAoB,mBAAmBY,MAAnB,CAA0B4D,KAAK,CAAClC,IAAhC,EAAsC,GAAtC,EAA2C1B,MAA3C,CAAkDoE,SAAlD,EAA6D,gBAA7D,IAAiF,GAAGpE,MAAH,CAAUlD,OAAO,CAACuH,UAAU,CAAC/D,IAAZ,CAAjB,EAAoC,OAApC,EAA6CN,MAA7C,CAAoDuD,MAAM,CAAC7B,IAA3D,EAAiE,GAAjE,EAAsE1B,MAAtE,CAA6EoE,SAA7E,EAAwF,GAAxF,CAAjF,GAAgL,WAAWpE,MAAX,CAAkBlD,OAAO,CAACwH,WAAW,CAAChE,IAAb,CAAzB,EAA6C,GAA7C,CAApM,EAAuP,CAAC+D,UAAU,CAACtE,OAAX,IAAsBsE,UAAU,CAACtE,OAAX,CAAmBO,IAA1C,EAAgDgE,WAAW,CAACvE,OAAZ,IAAuBuE,WAAW,CAACvE,OAAZ,CAAoBO,IAA3F,CAAvP;IACD,CAfuG,CAetG;;;IAGF,IAAIiE,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,iBAAtB,EAAyC;MACpD,IAAIC,QAAQ,GAAGD,iBAAiB,CAACD,IAAD,CAAhC;MACA,IAAI/C,OAAO,GAAGiD,QAAQ,CAAChD,IAAvB;MACA,IAAIiD,SAAS,GAAGjI,IAAI,CAAC4H,WAAW,CAAC3C,IAAb,EAAmB,UAAUH,GAAV,EAAe;QACpD,OAAOA,GAAG,CAACE,IAAJ,KAAaD,OAApB;MACD,CAFmB,CAApB,CAHoD,CAKhD;;MAEJ,IAAI,CAACkD,SAAL,EAAgB;QACdxG,OAAO,CAACiB,WAAR,CAAoB,4BAA4BY,MAA5B,CAAmC4D,KAAK,CAAClC,IAAzC,EAA+C,GAA/C,EAAoD1B,MAApD,CAA2DoE,SAA3D,EAAsE,GAAtE,EAA2EpE,MAA3E,CAAkFyB,OAAlF,EAA2F,kBAA3F,EAA+GzB,MAA/G,CAAsHuD,MAAM,CAAC7B,IAA7H,EAAmI,GAAnI,EAAwI1B,MAAxI,CAA+IoE,SAA/I,EAA0J,uBAA1J,CAApB,EAAwM,CAACM,QAAQ,CAAC3E,OAAV,EAAmBuE,WAAW,CAACvE,OAA/B,CAAxM;QACA,OAAO,UAAP;MACD,CAVmD,CAUlD;MACF;MACA;;;MAGA,IAAI,CAAC9C,WAAW,CAACyH,QAAQ,CAACpE,IAAV,EAAgBqE,SAAS,CAACrE,IAA1B,CAAhB,EAAiD;QAC/CnC,OAAO,CAACiB,WAAR,CAAoB,4BAA4BY,MAA5B,CAAmC4D,KAAK,CAAClC,IAAzC,EAA+C,GAA/C,EAAoD1B,MAApD,CAA2DoE,SAA3D,EAAsE,GAAtE,EAA2EpE,MAA3E,CAAkFyB,OAAlF,EAA2F,KAA3F,IAAoG,gBAAgBzB,MAAhB,CAAuBlD,OAAO,CAAC4H,QAAQ,CAACpE,IAAV,CAA9B,EAA+C,OAA/C,CAApG,GAA8J,GAAGN,MAAH,CAAUuD,MAAM,CAAC7B,IAAjB,EAAuB,GAAvB,EAA4B1B,MAA5B,CAAmCoE,SAAnC,EAA8C,GAA9C,EAAmDpE,MAAnD,CAA0DyB,OAA1D,EAAmE,aAAnE,CAA9J,GAAkP,GAAGzB,MAAH,CAAUlD,OAAO,CAAC6H,SAAS,CAACrE,IAAX,CAAjB,EAAmC,GAAnC,CAAtQ,EAA+S,CAACoE,QAAQ,CAAC3E,OAAT,IAAoB2E,QAAQ,CAAC3E,OAAT,CAAiBO,IAAtC,EAA4CqE,SAAS,CAAC5E,OAAV,IAAqB4E,SAAS,CAAC5E,OAAV,CAAkBO,IAAnF,CAA/S;MACD,CAjBmD,CAiBlD;;IAEH,CAnBD;;IAqBA,KAAK,IAAIkE,IAAI,GAAG,CAAX,EAAcC,iBAAiB,GAAGJ,UAAU,CAAC1C,IAAlD,EAAwD6C,IAAI,GAAGC,iBAAiB,CAAC9F,MAAjF,EAAyF6F,IAAI,EAA7F,EAAiG;MAC/F,IAAII,KAAK,GAAGL,MAAM,CAACC,IAAD,EAAOC,iBAAP,CAAlB;;MAEA,IAAIG,KAAK,KAAK,UAAd,EAA0B;IAC3B,CA3CuG,CA2CtG;;;IAGF,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,kBAAtB,EAA0C;MACrD,IAAIJ,SAAS,GAAGI,kBAAkB,CAACD,IAAD,CAAlC;MACA,IAAIrD,OAAO,GAAGkD,SAAS,CAACjD,IAAxB;MACA,IAAIgD,QAAQ,GAAGhI,IAAI,CAAC2H,UAAU,CAAC1C,IAAZ,EAAkB,UAAUH,GAAV,EAAe;QAClD,OAAOA,GAAG,CAACE,IAAJ,KAAaD,OAApB;MACD,CAFkB,CAAnB;;MAIA,IAAI,CAACiD,QAAD,IAAa3G,kBAAkB,CAAC4G,SAAD,CAAnC,EAAgD;QAC9CxG,OAAO,CAACiB,WAAR,CAAoB,gBAAgBY,MAAhB,CAAuBuD,MAAM,CAAC7B,IAA9B,EAAoC,GAApC,EAAyC1B,MAAzC,CAAgDoE,SAAhD,EAA2D,8BAA3D,EAA2FpE,MAA3F,CAAkGyB,OAAlG,EAA2G,4CAA3G,EAAyJzB,MAAzJ,CAAgK4D,KAAK,CAAClC,IAAtK,EAA4K,GAA5K,EAAiL1B,MAAjL,CAAwLoE,SAAxL,EAAmM,GAAnM,CAApB,EAA6N,CAACO,SAAS,CAAC5E,OAAX,EAAoBsE,UAAU,CAACtE,OAA/B,CAA7N;MACD;IACF,CAVD;;IAYA,KAAK,IAAI+E,IAAI,GAAG,CAAX,EAAcC,kBAAkB,GAAGT,WAAW,CAAC3C,IAApD,EAA0DmD,IAAI,GAAGC,kBAAkB,CAACpG,MAApF,EAA4FmG,IAAI,EAAhG,EAAoG;MAClGD,MAAM,CAACC,IAAD,EAAOC,kBAAP,CAAN;IACD;EACF;AACF;;AAED,SAASrC,oBAAT,CAA8BvE,OAA9B,EAAuC6G,KAAvC,EAA8C;EAC5C,IAAIC,WAAW,GAAGD,KAAK,CAACE,QAAN,EAAlB;;EAEA,IAAID,WAAW,CAACtG,MAAZ,KAAuB,CAA3B,EAA8B;IAC5BR,OAAO,CAACiB,WAAR,CAAoB,cAAcY,MAAd,CAAqBgF,KAAK,CAACtD,IAA3B,EAAiC,wCAAjC,CAApB,EAAgGqB,WAAW,CAACiC,KAAD,CAA3G;EACD;;EAED,IAAIG,iBAAiB,GAAGhE,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;;EAEA,KAAK,IAAIgE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGH,WAAW,CAACtG,MAAtC,EAA8CyG,IAAI,EAAlD,EAAsD;IACpD,IAAIC,UAAU,GAAGJ,WAAW,CAACG,IAAD,CAA5B;;IAEA,IAAID,iBAAiB,CAACE,UAAU,CAAC3D,IAAZ,CAArB,EAAwC;MACtCvD,OAAO,CAACiB,WAAR,CAAoB,cAAcY,MAAd,CAAqBgF,KAAK,CAACtD,IAA3B,EAAiC,yBAAjC,EAA4D1B,MAA5D,CAAmEqF,UAAU,CAAC3D,IAA9E,EAAoF,QAApF,CAApB,EAAmH4D,uBAAuB,CAACN,KAAD,EAAQK,UAAU,CAAC3D,IAAnB,CAA1I;MACA;IACD;;IAEDyD,iBAAiB,CAACE,UAAU,CAAC3D,IAAZ,CAAjB,GAAqC,IAArC;;IAEA,IAAI,CAACpE,YAAY,CAAC+H,UAAD,CAAjB,EAA+B;MAC7BlH,OAAO,CAACiB,WAAR,CAAoB,cAAcY,MAAd,CAAqBgF,KAAK,CAACtD,IAA3B,EAAiC,kCAAjC,IAAuE,qBAAqB1B,MAArB,CAA4BlD,OAAO,CAACuI,UAAD,CAAnC,EAAiD,GAAjD,CAA3F,EAAkJC,uBAAuB,CAACN,KAAD,EAAQO,MAAM,CAACF,UAAD,CAAd,CAAzK;IACD;EACF;AACF;;AAED,SAAS1C,kBAAT,CAA4BxE,OAA5B,EAAqCqH,QAArC,EAA+C;EAC7C,IAAIC,UAAU,GAAGD,QAAQ,CAACE,SAAT,EAAjB;;EAEA,IAAID,UAAU,CAAC9G,MAAX,KAAsB,CAA1B,EAA6B;IAC3BR,OAAO,CAACiB,WAAR,CAAoB,aAAaY,MAAb,CAAoBwF,QAAQ,CAAC9D,IAA7B,EAAmC,kCAAnC,CAApB,EAA4FqB,WAAW,CAACyC,QAAD,CAAvG;EACD;;EAED,KAAK,IAAIG,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,UAAU,CAAC9G,MAArC,EAA6CgH,IAAI,EAAjD,EAAqD;IACnD,IAAIC,SAAS,GAAGH,UAAU,CAACE,IAAD,CAA1B;IACA,IAAIE,SAAS,GAAGD,SAAS,CAAClE,IAA1B,CAFmD,CAEnB;;IAEhCT,YAAY,CAAC9C,OAAD,EAAUyH,SAAV,CAAZ;;IAEA,IAAIC,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OAAtC,IAAiDA,SAAS,KAAK,MAAnE,EAA2E;MACzE1H,OAAO,CAACiB,WAAR,CAAoB,aAAaY,MAAb,CAAoBwF,QAAQ,CAAC9D,IAA7B,EAAmC,yBAAnC,EAA8D1B,MAA9D,CAAqE6F,SAArE,EAAgF,GAAhF,CAApB,EAA0GD,SAAS,CAAC7F,OAApH;IACD;EACF;AACF;;AAED,SAAS6C,mBAAT,CAA6BzE,OAA7B,EAAsC2H,QAAtC,EAAgD;EAC9C,IAAIjD,MAAM,GAAGjG,YAAY,CAACkJ,QAAQ,CAAChD,SAAT,EAAD,CAAzB;;EAEA,IAAID,MAAM,CAAClE,MAAP,KAAkB,CAAtB,EAAyB;IACvBR,OAAO,CAACiB,WAAR,CAAoB,qBAAqBY,MAArB,CAA4B8F,QAAQ,CAACpE,IAArC,EAA2C,kCAA3C,CAApB,EAAoGqB,WAAW,CAAC+C,QAAD,CAA/G;EACD,CAL6C,CAK5C;;;EAGF,KAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGlD,MAAM,CAAClE,MAAjC,EAAyCoH,IAAI,EAA7C,EAAiD;IAC/C,IAAI9C,KAAK,GAAGJ,MAAM,CAACkD,IAAD,CAAlB,CAD+C,CAE/C;;IACA9E,YAAY,CAAC9C,OAAD,EAAU8E,KAAV,CAAZ,CAH+C,CAGjB;;IAE9B,IAAI,CAACpF,WAAW,CAACoF,KAAK,CAAC3C,IAAP,CAAhB,EAA8B;MAC5BnC,OAAO,CAACiB,WAAR,CAAoB,eAAeY,MAAf,CAAsB8F,QAAQ,CAACpE,IAA/B,EAAqC,GAArC,EAA0C1B,MAA1C,CAAiDiD,KAAK,CAACvB,IAAvD,EAA6D,sBAA7D,IAAuF,YAAY1B,MAAZ,CAAmBlD,OAAO,CAACmG,KAAK,CAAC3C,IAAP,CAA1B,EAAwC,GAAxC,CAA3G,EAAyJ2C,KAAK,CAAClD,OAAN,IAAiBkD,KAAK,CAAClD,OAAN,CAAcO,IAAxL;IACD;EACF;AACF;;AAED,SAAS6B,sCAAT,CAAgDhE,OAAhD,EAAyD;EACvD;EACA;EACA;EACA,IAAI6H,YAAY,GAAG7E,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB,CAJuD,CAIf;;EAExC,IAAI6E,SAAS,GAAG,EAAhB,CANuD,CAMnC;;EAEpB,IAAIC,wBAAwB,GAAG/E,MAAM,CAACC,MAAP,CAAc,IAAd,CAA/B;EACA,OAAO+E,oBAAP,CATuD,CAS1B;EAC7B;EACA;;EAEA,SAASA,oBAAT,CAA8BL,QAA9B,EAAwC;IACtC,IAAIE,YAAY,CAACF,QAAQ,CAACpE,IAAV,CAAhB,EAAiC;MAC/B;IACD;;IAEDsE,YAAY,CAACF,QAAQ,CAACpE,IAAV,CAAZ,GAA8B,IAA9B;IACAwE,wBAAwB,CAACJ,QAAQ,CAACpE,IAAV,CAAxB,GAA0CuE,SAAS,CAACtH,MAApD;IACA,IAAIkE,MAAM,GAAGjG,YAAY,CAACkJ,QAAQ,CAAChD,SAAT,EAAD,CAAzB;;IAEA,KAAK,IAAIsD,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGvD,MAAM,CAAClE,MAAjC,EAAyCyH,IAAI,EAA7C,EAAiD;MAC/C,IAAInD,KAAK,GAAGJ,MAAM,CAACuD,IAAD,CAAlB;;MAEA,IAAIxI,aAAa,CAACqF,KAAK,CAAC3C,IAAP,CAAb,IAA6B5C,iBAAiB,CAACuF,KAAK,CAAC3C,IAAN,CAAW+F,MAAZ,CAAlD,EAAuE;QACrE,IAAIC,SAAS,GAAGrD,KAAK,CAAC3C,IAAN,CAAW+F,MAA3B;QACA,IAAIE,UAAU,GAAGL,wBAAwB,CAACI,SAAS,CAAC5E,IAAX,CAAzC;QACAuE,SAAS,CAACrG,IAAV,CAAeqD,KAAf;;QAEA,IAAIsD,UAAU,KAAKtE,SAAnB,EAA8B;UAC5BkE,oBAAoB,CAACG,SAAD,CAApB;QACD,CAFD,MAEO;UACL,IAAIE,SAAS,GAAGP,SAAS,CAACQ,KAAV,CAAgBF,UAAhB,CAAhB;UACA,IAAIG,OAAO,GAAGF,SAAS,CAAC3H,GAAV,CAAc,UAAU8H,QAAV,EAAoB;YAC9C,OAAOA,QAAQ,CAACjF,IAAhB;UACD,CAFa,EAEX1C,IAFW,CAEN,GAFM,CAAd;UAGAb,OAAO,CAACiB,WAAR,CAAoB,mCAAmCY,MAAnC,CAA0CsG,SAAS,CAAC5E,IAApD,EAA0D,0DAA1D,EAAsH1B,MAAtH,CAA6H0G,OAA7H,EAAsI,KAAtI,CAApB,EAAkKF,SAAS,CAAC3H,GAAV,CAAc,UAAU8H,QAAV,EAAoB;YAClM,OAAOA,QAAQ,CAAC5G,OAAhB;UACD,CAFiK,CAAlK;QAGD;;QAEDkG,SAAS,CAACW,GAAV;MACD;IACF;;IAEDV,wBAAwB,CAACJ,QAAQ,CAACpE,IAAV,CAAxB,GAA0CO,SAA1C;EACD;AACF;;AAED,SAASc,WAAT,CAAqBQ,MAArB,EAA6B;EAC3B,IAAIxD,OAAO,GAAGwD,MAAM,CAACxD,OAArB;EAAA,IACI8G,iBAAiB,GAAGtD,MAAM,CAACsD,iBAD/B;EAEA,OAAO9G,OAAO,GAAG8G,iBAAiB,GAAG,CAAC9G,OAAD,EAAUC,MAAV,CAAiB6G,iBAAjB,CAAH,GAAyC,CAAC9G,OAAD,CAA7D,GAAyE8G,iBAAiB,IAAI,EAA5G;AACD;;AAED,SAASpG,cAAT,CAAwB8C,MAAxB,EAAgCuD,MAAhC,EAAwC;EACtC,OAAOnK,OAAO,CAACoG,WAAW,CAACQ,MAAD,CAAZ,EAAsB,UAAUwD,IAAV,EAAgB;IAClD,OAAOD,MAAM,CAACC,IAAD,CAAN,IAAgB,EAAvB;EACD,CAFa,CAAd;AAGD;;AAED,SAASlD,8BAAT,CAAwCvD,IAAxC,EAA8CsD,KAA9C,EAAqD;EACnD,OAAOnD,cAAc,CAACH,IAAD,EAAO,UAAU0G,QAAV,EAAoB;IAC9C,OAAOA,QAAQ,CAACC,UAAhB;EACD,CAFoB,CAAd,CAEJxH,MAFI,CAEG,UAAUyH,SAAV,EAAqB;IAC7B,OAAOA,SAAS,CAACxF,IAAV,CAAeyF,KAAf,KAAyBvD,KAAK,CAAClC,IAAtC;EACD,CAJM,CAAP;AAKD;;AAED,SAAS4D,uBAAT,CAAiCN,KAAjC,EAAwCoC,QAAxC,EAAkD;EAChD,OAAO3G,cAAc,CAACuE,KAAD,EAAQ,UAAUqC,SAAV,EAAqB;IAChD,OAAOA,SAAS,CAACC,KAAjB;EACD,CAFoB,CAAd,CAEJ7H,MAFI,CAEG,UAAUuH,QAAV,EAAoB;IAC5B,OAAOA,QAAQ,CAACtF,IAAT,CAAcyF,KAAd,KAAwBC,QAA/B;EACD,CAJM,CAAP;AAKD"},"metadata":{},"sourceType":"module"}