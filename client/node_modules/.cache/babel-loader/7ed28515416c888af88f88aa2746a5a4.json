{"ast":null,"code":"import invariant from '../jsutils/invariant';\nimport isPromise from '../jsutils/isPromise';\nimport { parse } from '../language/parser';\nimport { execute } from '../execution/execute';\nimport { getIntrospectionQuery } from './introspectionQuery';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  /* istanbul ignore next */\n\n  !isPromise(result) && !result.errors && result.data || invariant(0);\n  return result.data;\n}","map":{"version":3,"names":["invariant","isPromise","parse","execute","getIntrospectionQuery","introspectionFromSchema","schema","options","queryAST","result","errors","data"],"sources":["C:/Users/RiniPeni/Documents/Developer/ReactApps/LeCookBook/client/node_modules/graphql/utilities/introspectionFromSchema.mjs"],"sourcesContent":["import invariant from '../jsutils/invariant';\nimport isPromise from '../jsutils/isPromise';\nimport { parse } from '../language/parser';\nimport { execute } from '../execution/execute';\nimport { getIntrospectionQuery } from './introspectionQuery';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n\n  /* istanbul ignore next */\n  !isPromise(result) && !result.errors && result.data || invariant(0);\n  return result.data;\n}\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;EACvD,IAAIC,QAAQ,GAAGN,KAAK,CAACE,qBAAqB,CAACG,OAAD,CAAtB,CAApB;EACA,IAAIE,MAAM,GAAGN,OAAO,CAACG,MAAD,EAASE,QAAT,CAApB;EAEA;;EACA,CAACP,SAAS,CAACQ,MAAD,CAAV,IAAsB,CAACA,MAAM,CAACC,MAA9B,IAAwCD,MAAM,CAACE,IAA/C,IAAuDX,SAAS,CAAC,CAAD,CAAhE;EACA,OAAOS,MAAM,CAACE,IAAd;AACD"},"metadata":{},"sourceType":"module"}